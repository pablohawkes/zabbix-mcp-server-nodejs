name: Documentation Generation and Deployment

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/tools/**'
      - 'src/utils/doc-generator.js'
      - 'scripts/extract-tools-direct.js'
      - 'scripts/generate-docs.js'
      - 'package.json'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/tools/**'
      - 'src/utils/doc-generator.js'
      - 'scripts/extract-tools-direct.js'
      - 'scripts/generate-docs.js'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Extract tools and generate documentation
      run: |
        echo "üîß Extracting tools from source files..."
        npm run docs:extract
        
        echo "üìö Generating documentation..."
        npm run docs:generate
        
        echo "üåê Generating HTML documentation..."
        npm run docs:html
        
        echo "üìä Documentation generation completed!"
        
    - name: Verify generated files
      run: |
        echo "üìÅ Checking generated documentation files..."
        ls -la docs/generated/
        
        echo "üìÑ OpenAPI spec size:"
        wc -l docs/generated/openapi.json
        
        echo "üìñ Markdown docs size:"
        wc -l docs/generated/API.md
        
        echo "‚úÖ Documentation verification completed!"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          docs/generated/
          docs/extracted-tools.json
        retention-days: 30
        
    - name: Setup Pages (on main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
      
    - name: Prepare Pages deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Create a pages directory with our documentation
        mkdir -p pages
        
        # Copy generated documentation
        cp -r docs/generated/* pages/
        
        # Create a simple index.html that redirects to the API documentation
        cat > pages/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>UpGuard CyberRisk MCP Server Documentation</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 800px;
                    margin: 50px auto;
                    padding: 20px;
                    line-height: 1.6;
                }
                .header {
                    text-align: center;
                    margin-bottom: 40px;
                }
                .links {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .link-card {
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    padding: 20px;
                    text-decoration: none;
                    color: inherit;
                    transition: box-shadow 0.2s;
                }
                .link-card:hover {
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }
                .link-title {
                    font-size: 1.2em;
                    font-weight: bold;
                    margin-bottom: 10px;
                    color: #0066cc;
                }
                .link-desc {
                    color: #666;
                    font-size: 0.9em;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üõ°Ô∏è UpGuard CyberRisk MCP Server</h1>
                <p>Model Context Protocol server for UpGuard CyberRisk API integration</p>
            </div>
            
            <div class="links">
                <a href="API.md" class="link-card">
                    <div class="link-title">üìñ API Documentation</div>
                    <div class="link-desc">Human-readable Markdown documentation with examples and authentication details</div>
                </a>
                
                <a href="openapi.json" class="link-card">
                    <div class="link-title">üîß OpenAPI Specification</div>
                    <div class="link-desc">Machine-readable OpenAPI 3.0 spec for tools like Swagger UI, Postman, and API testing</div>
                </a>
            </div>
            
            <div style="text-align: center; margin-top: 40px; color: #666;">
                <p>üìä Documentation includes <strong>67 tools</strong> across <strong>13 categories</strong></p>
                <p>üîó <a href="https://github.com/leroylim/upguard-cyberrisk-mcp-server-nodejs">View on GitHub</a></p>
            </div>
        </body>
        </html>
        EOF
        
        echo "üìÑ Pages directory prepared for deployment"
        ls -la pages/
        
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages/
        
  deploy-pages:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 