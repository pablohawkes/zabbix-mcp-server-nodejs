{
  "securityDefinitions": {
    "API key in header": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "security": [
    {
      "API key in header": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Access information from the CyberRisk platform programmatically using this API.\n\nYou can find or generate an API key to access this API in your CyberRisk Account Settings.\nPlease authorize all requests by setting the \"Authorization\" header to your api key.\n\nThe base url for all public endpoints is https://cyber-risk.upguard.com/api/public",
    "title": "UpGuard CyberRisk API",
    "version": "1.11.1"
  },
  "host": "cyber-risk.upguard.com",
  "basePath": "/api/public",
  "paths": {
    "/available_risks": {
      "get": {
        "description": "Returns a list of available risks in the UpGuard platform with detailed info. Please note this version of the endpoint has been deprecated, and v2 should be used instead.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of available risks in the platform",
        "operationId": "available_risks",
        "deprecated": true,
        "responses": {
          "200": {
            "$ref": "#/responses/getAvailableRisksResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/available_risks/risk": {
      "get": {
        "description": "Returns the details for a risk.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get details for a risk in the platform",
        "operationId": "risk",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the risk to fetch details for",
            "name": "risk_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRiskDetailResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/available_risks/v2": {
      "get": {
        "description": "Returns a list of available risks in the UpGuard platform with detailed info.\n\nSome risks in the platform are generic risks like \"exposed_service:*\". The values of some of the fields for these risks\ndepends on the details of the risk, e.g. which particular service is exposed. As such these fields are omitted from the response.\n\nTo get the full details for a specific risk, e.g. \"exposed_service:FTP\", use the risk details endpoint which will return\nthe full information for the particular service.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of available risks in the platform",
        "operationId": "available_risks_v2",
        "responses": {
          "200": {
            "$ref": "#/responses/getAvailableRisksV2Response"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/breach": {
      "get": {
        "description": "Returns the details of an identity breach.\n\nRequired API key permissions: `IdentityBreaches` (select when creating API key in Account Settings)",
        "tags": [
          "breaches"
        ],
        "summary": "Get the details for an identity breach",
        "operationId": "identity_breach",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the breach to fetch",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIdentityBreachResponse"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/breaches": {
      "get": {
        "description": "Returns a list of identities ordered by last breached date.\n\nRequired API key permissions: `IdentityBreaches` (select when creating API key in Account Settings)",
        "tags": [
          "breaches"
        ],
        "summary": "Get a list of breached identities",
        "operationId": "breached_identities",
        "parameters": [
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "name",
              "domain",
              "num_breaches",
              "date_last_breach"
            ],
            "type": "string",
            "default": "date_last_breach",
            "description": "The value to sort the breached identities by\n\nIf not specified will default to `date_last_breach` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The breach ID to filter on",
            "name": "breach_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getBreachedIdentitiesResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/bulk/hostnames": {
      "get": {
        "description": "Get the list of registered hostnames and their risks. You can use the omit_risks,\nomit_vendor, omit_score and omit_labels query parameter to turn off these information\nfrom the response and quickly get a list of registered hostnames.\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "List hostnames and their risks",
        "operationId": "bulk_list_hostnames",
        "parameters": [
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 200,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether to sort the results in descending order.",
            "name": "sort_desc",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the scan information, i.e. risks, score and last scanned at.",
            "name": "omit_scan_info",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the vendor information for a hostname in the response.",
            "name": "omit_vendor",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the labels for a hostname in the response.",
            "name": "omit_labels",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Exclude active hostnames from the results.",
            "name": "exclude_active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Exclude inactive hostnames from the results.",
            "name": "exclude_inactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": "false",
            "description": "Filter results to only hostnames that have all the provided labels.",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listBulkHostnamesSuccessful"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "post": {
        "description": "Register a list of hostnames to be scanned for risks. The provided hostnames must be fully qualified domain names\nor IPv4 addresses. Currently, a maximum of 1000 hostnames in a single request is supported. This will always replace\nthe labels of currently registered hostnames and if the request has empty labels they will all be removed.\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "Register a list of hostnames to be scanned for risks",
        "operationId": "bulk_register_hostnames",
        "parameters": [
          {
            "name": "BulkRegisterHostnamesV1RequestBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BulkRegisterHostnamesV1RequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/registerBulkHostnamesSuccessful"
          },
          "402": {
            "$ref": "#/responses/invalidLimitExceedError"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "delete": {
        "description": "Deregister a list of hostnames. The provided hostnames must be fully qualified domain names\nor IPv4 addresses. Currently, a maximum of 1000 hostnames in a single request is supported.\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "Deregister a list of hostnames",
        "operationId": "bulk_deregister_hostnames",
        "parameters": [
          {
            "name": "BulkDeregisterHostnamesV1RequestBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BulkDeregisterHostnamesV1RequestBody"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deregisterBulkHostnamesSuccessful"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/bulk/hostnames/stats": {
      "get": {
        "description": "Get statistics for the registered hostnames. This will return the number of registered hostnames, the number of\nremaining slots and the number of active and inactive hostnames\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "Get statistics around registered bulk hostnames",
        "operationId": "bulk_get_hostnames_stats",
        "responses": {
          "200": {
            "$ref": "#/responses/getBulkHostnamesStatsSuccessful"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/bulk/hostnames/{hostname}": {
      "get": {
        "description": "Get the details for a hostname. The provided hostname must be a fully\nqualified domain name or an IPv4 address.\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "Get the details for a hostname",
        "operationId": "bulk_get_hostname_details",
        "parameters": [
          {
            "type": "string",
            "format": "hostname",
            "description": "The hostname to fetch details for. It must be a fully qualified domain name or an IPv4 address.",
            "name": "hostname",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the scan information, i.e. risks, score and last scanned at.",
            "name": "omit_scan_info",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the vendor information for a hostname in the response.",
            "name": "omit_vendor",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Omit the labels for a hostname in the response.",
            "name": "omit_labels",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getBulkHostnameDetailsSuccessful"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/bulk/hostnames/{hostname}/labels": {
      "put": {
        "description": "Assign labels to a hostname replacing the existing ones if any. To remove all labels use an empty array in the request.\n\nThis is an add-on endpoint not available to all accounts. Please contact support for information about bulk endpoints and how to upgrade your account.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "bulk"
        ],
        "summary": "Assign new labels to a hostname",
        "operationId": "bulk_hostname_put_labels",
        "parameters": [
          {
            "type": "string",
            "format": "hostname",
            "description": "The hostname to fetch details for. It must be a fully qualified domain name or an IPv4 address.",
            "name": "hostname",
            "in": "path",
            "required": true
          },
          {
            "example": "[\"network\", \"data\"]",
            "description": "Labels list",
            "name": "labels",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/dataleaks/disclosures": {
      "get": {
        "description": "Returns a list of the disclosures in your account matching the given filters.\n\nRequired API key permissions: `DataLeaks` (select when creating API key in Account Settings)",
        "tags": [
          "dataleaks"
        ],
        "summary": "Get a list of disclosures",
        "operationId": "dataleaks_disclosures",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "The minimum (non-inclusive) timestamp of a disclosure (RFC 3339 format).",
            "name": "min_time",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The maximum (non-inclusive) timestamp of a disclosure (RFC 3339 format).",
            "name": "max_time",
            "in": "query"
          },
          {
            "enum": [
              "Disclosed",
              "Acknowledged",
              "Investigating",
              "Remediating",
              "ClosedNoIssue",
              "ClosedRiskAccepted",
              "ClosedFixedUnverified",
              "ClosedFixedVerified"
            ],
            "type": "string",
            "description": "A comma-delimited list of statuses that disclosures should match.",
            "name": "statuses",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-delimited list of IDs that disclosures should match.",
            "name": "ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDataLeaksDisclosuresResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/dataleaks/disclosures/status": {
      "put": {
        "description": "Required API key permissions: `DataLeaks` (select when creating API key in Account Settings)",
        "tags": [
          "dataleaks"
        ],
        "summary": "Update the status of a disclosure",
        "operationId": "dataleaks_disclosures_update_status",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the disclosure",
            "name": "disclosure_id",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "Acknowledged",
              "Investigating",
              "Remediating",
              "ClosedNoIssue",
              "ClosedRiskAccepted",
              "ClosedFixedUnverified"
            ],
            "type": "string",
            "description": "The new status for the disclosure",
            "name": "new_status",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The email address of the user changing the status (must have a Cyber Risk account with the \"Data Leaks\" role).",
            "name": "user_email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comment to accompany the status change, if required",
            "name": "comment",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/domain": {
      "get": {
        "description": "Returns the details for a domain. It will return 422 when requesting details of an inactive domain.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "domains"
        ],
        "summary": "Retrieve details for a domain",
        "operationId": "domain_details",
        "parameters": [
          {
            "type": "string",
            "description": "The hostname for which to return the details, e.g. \"upguard.com\"",
            "name": "hostname",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/domain/labels": {
      "put": {
        "description": "Assign labels to a domain. To remove all labels pass an empty list.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "domains"
        ],
        "summary": "Assign labels to a domain",
        "operationId": "domain_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The hostname to update labels for",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the domain. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/domains": {
      "get": {
        "description": "Returns a list of domains for your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "domains"
        ],
        "summary": "Get a list of domains",
        "operationId": "domains",
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve active domains",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve inactive domains",
            "name": "inactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "domain",
              "active",
              "automated_score",
              "scanned_at"
            ],
            "type": "string",
            "default": "domain",
            "description": "The value to sort the domains by\n\nIf not specified will default to `domain` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "put": {
        "description": "Add a list of custom domains to your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "domains"
        ],
        "summary": "Add custom domains",
        "operationId": "add_custom_domains",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A comma separated list of hostnames to add",
            "name": "hostnames",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to add to the hostnames",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "delete": {
        "description": "Remove custom domains from your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "domains"
        ],
        "summary": "Remove custom domains",
        "operationId": "remove_custom_domains",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A comma separated list of hostnames to remove. Only hostnames or labels can be specified not both",
            "name": "hostnames",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of labels whose hostnames will be removed. All custom domains with at least one of the provided labels will be removed. Only hostnames or labels can be specified not both",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/ip": {
      "get": {
        "description": "Returns the details of the IP address. It will return 422 when requesting details of an inactive IP address.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Retrieve details for an IP address",
        "operationId": "ip_details",
        "parameters": [
          {
            "type": "string",
            "description": "The IP address to get details for",
            "name": "ip",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIpDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/ip/labels": {
      "put": {
        "description": "Assign labels to an IP. To remove all labels pass an empty list.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Assign labels to an IP",
        "operationId": "ip_update_labels",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The IP to update labels for",
            "name": "ip",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the IP. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/ips": {
      "get": {
        "description": "Returns a list of ips for your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Get a list of ips",
        "operationId": "ips",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "ip",
              "owner",
              "country",
              "asn",
              "as_name",
              "automated_score"
            ],
            "type": "string",
            "default": "ip",
            "description": "The value to sort the IPs by\n\nIf not specified will default to `ip` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIPsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "put": {
        "description": "Add a list of custom ips to your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Add custom ips",
        "operationId": "add_custom_ips",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of ips to add",
            "name": "ips",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the ips when added.",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "delete": {
        "description": "Remove custom ips from your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Remove custom ips",
        "operationId": "remove_custom_ips",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A comma separated list of ips to remove. Only ips or labels can be specified not both",
            "name": "ips",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of labels whose domains will be removed. All custom IPs with at least one of the provided labels will be removed. Only ips or labels can be specified not both",
            "name": "labels",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/labels": {
      "get": {
        "description": "Returns the list of labels for your account.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "labels"
        ],
        "summary": "Get the list of registered labels",
        "operationId": "labels",
        "responses": {
          "200": {
            "$ref": "#/responses/getLabelsResponse"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "description": "Returns a list of notifications ordered by their ID. By default, only notifications from the last 7 days are returned.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "notifications"
        ],
        "summary": "Get a list of notifications for your organization.",
        "operationId": "get_notifications",
        "responses": {
          "200": {
            "$ref": "#/responses/getNotificationsV1Response"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/organisation": {
      "get": {
        "description": "Returns the information of the organisation associated with the API key used for the request.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "organisation"
        ],
        "summary": "Get the current organisation",
        "operationId": "getOrganisationV1",
        "responses": {
          "200": {
            "$ref": "#/responses/getOrganisationV1"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/ranges": {
      "get": {
        "description": "Returns a list of ip ranges for your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "ips"
        ],
        "summary": "Get a list of ip ranges",
        "operationId": "ranges",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "start",
              "end",
              "num_ips",
              "owner",
              "country",
              "asn",
              "as_name"
            ],
            "type": "string",
            "default": "num_ips",
            "description": "The value to sort the IP ranges by\n\nIf not specified will default to `num_ips` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRangesResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/reports/custom": {
      "get": {
        "description": "Use this endpoint to retrieve the list of custom report templates defined for your account.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "reports"
        ],
        "summary": "Get the list of custom report templates defined for the account",
        "operationId": "custom_reports_list",
        "responses": {
          "200": {
            "$ref": "#/responses/customReportsListV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/reports/queue": {
      "post": {
        "description": "Asynchronously queues a report for exporting. To use this API, first call this endpoint with the type of report you wish to\ngenerate and any other filtering parameters. You can optionally specify a list of email addresses or a URL\nthat will receive a POST request when the export completes.\n\nWhen a report is queued, you will receive a unique queued_report_id. Use this ID to check the status of the export using the\n`/reports/status` endpoint.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "reports"
        ],
        "summary": "Queue a report export",
        "operationId": "queue_report",
        "parameters": [
          {
            "enum": [
              "BoardSummaryPDF",
              "BoardSummaryPPTX",
              "BreachSightSummaryPDF",
              "BreachSightDetailedPDF",
              "VendorRiskExecutiveSummaryPDF",
              "VendorSummaryPDF",
              "VendorDetailedPDF",
              "VendorRiskAssessmentPDF",
              "CustomPDF",
              "VendorRiskProfileXLSX",
              "VendorVulnsOverviewXLSX",
              "VendorDomainListPDF"
            ],
            "type": "string",
            "description": "The type of report to export. Note that each report type may require different parameters to be specified in the request.\n\nWhen *VendorRiskAssessmentPDF* is selected the latest published risk assessment will be used, if no published risk assessment is available for the selected vendor a 422 error will be returned.",
            "name": "report_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "For an export of type 'CustomPDF', specify the UUID of the custom report to generate. This is a required field for the custom report type.",
            "name": "custom_report_uuid",
            "in": "query"
          },
          {
            "maxItems": 5,
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            },
            "description": "Optionally email the generated report to the specified addresses when it is ready.",
            "name": "email_addresses",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uri",
            "description": "Optionally specify a URL that will receive a POST request when the report is ready.\nThe request will contain a JSON body containing a URL to download the report, in the following format:\n```json\n{\n\"queued_report_id\": \"string\",\n\"download_url\": \"url\"\n\"download_url_expires\": \"string\"\n}\n```",
            "name": "post_webhook_url",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by asset portfolio names. Case-sensitive. Optional. Applicable only when *report_type* is *BreachSightSummaryPDF* or *BreachSightDetailedPDF*.",
            "name": "asset_portfolio_names",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by vendor portfolio names. Case-sensitive. Optional. Applicable only when *report_type* is *BoardSummaryPDF*, *BoardSummaryPPTX*, or *VendorRiskExecutiveSummaryPDF*.",
            "name": "vendor_portfolio_names",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the vendor to generate the report for. Either this, *vendor_primary_hostname* or *filter_by_vendor_hostnames* are required when *report_type* is *VendorSummaryPDF*, *VendorDetailedPDF*, *VendorRiskAssessmentPDF*, *CustomPDF*, *VendoriskProfileXLSX*, *VendorVulnsOverviewXLSX* or *VendorDomainListPDF*.",
            "name": "vendor_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Primary hostname of the vendor to generate the report for. Either this, *vendor_id* or *filter_by_vendor_hostnames* are required when *report_type* is *VendorSummaryPDF*, *VendorDetailedPDF*, *VendorRiskAssessmentPDF*, *CustomPDF*, *VendorRiskProfileXLSX*, *VendorVulnsOverviewXLSX*, or *VendorDomainListPDF*.",
            "name": "vendor_primary_hostname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of hostnames from a single vendor to generate the report for. Either this, *vendor_id* or *vendor_primary_hostname* are required when *report_type* is *VendorSummaryPDF*, *VendorDetailedPDF*, *CustomPDF*, *VendorRiskProfileXLSX*, *VendorVulnsOverviewXLSX*, or *VendorDomainListPDF*.",
            "name": "filter_by_vendor_hostnames",
            "in": "query"
          },
          {
            "type": "string",
            "description": "String to use as the first part of the report filename. For vendor reports this will precede the vendor name, and for others the account name.\nA maximum of the first 20 characters (runes) of the supplied string will be used",
            "name": "filename_prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When requesting a vendor report, determine if the report should wait for the appropriate data to become available. This is typical of\nreports where the vendor may have only just become known by the system, or the vendor only just been watched by the account. Typically, the report\ngeneration and delivery is delayed by up to 72 hours to allow for the data to become available. This parameter is only valid when *report_type* is\nVendorSummaryPDF*, *VendorDetailedPDF*, *CustomPDF*, *VendorRiskProfileXLSX*, *VendorVulnsOverviewXLSX*, or *VendorDomainListPDF*.",
            "name": "wait_for_data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/queueReportV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/reports/status": {
      "get": {
        "description": "Poll this endpoint for the status of a report export you have queued. When complete, you will receive a download URL.\n\nRequired API key permissions: `Platform` (select when creating API key in Account Settings)",
        "tags": [
          "reports"
        ],
        "summary": "Get the status of an exported report",
        "operationId": "report_status",
        "parameters": [
          {
            "type": "string",
            "description": "The queued_report_id returned from the /reports/queue endpoint.",
            "name": "queued_report_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/reportStatusV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks": {
      "get": {
        "description": "Returns a list of risks that have been detected for your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of active risks for your account",
        "operationId": "risks",
        "parameters": [
          {
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "type": "string",
            "default": "info",
            "description": "Minimum severity for the risks",
            "name": "min_severity",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Include metadata for risks",
            "name": "include_meta",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRisksResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/diff": {
      "get": {
        "description": "Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.\n\nRisks resolved are not computed for dates prior to 2018-11-01 00:00:00.\n\nPreviously provisional risks that are now scored will appear in the list of risks introduced.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of risk changes for your account",
        "operationId": "org_risks_diff",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format).",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.",
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRisksDiffResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/vendors": {
      "get": {
        "description": "Returns a list of risks that have been detected for a particular vendor.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of active risks for a vendor",
        "operationId": "vendor_risks",
        "parameters": [
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The primary hostname of the vendor to return risks for",
            "name": "primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "info",
              "low",
              "medium",
              "high",
              "critical"
            ],
            "type": "string",
            "default": "info",
            "description": "Minimum severity for the risks",
            "name": "min_severity",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Include metadata for risks,\n`include_meta` and 'exclude_hostnames' cannot both be true",
            "name": "include_meta",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Exclude hostnames for risks,\n`include_meta` and 'exclude_hostnames' cannot both be true",
            "name": "exclude_hostnames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRisksResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/vendors/diff": {
      "get": {
        "description": "Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.\n\nThe maximum allowed interval is 30 days.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of risk changes for a vendor",
        "operationId": "vendor_risks_diff",
        "parameters": [
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The primary hostname for a vendor",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). Must be in the last 2 years.",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.",
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRisksDiffResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/vendors/diffs": {
      "get": {
        "description": "Returns a list of the risks introduced and risks resolved for domains or IPs between two dates across your monitored vendors.\n\nThe maximum allowed interval is 30 days.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of risk changes for monitored vendors",
        "operationId": "vendors_risks_diff",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format).",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.",
            "name": "end_date",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 200,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 20,
            "description": "The number of results to return per page.\nValid values range from 10 to 200.\nDefaults to 20 if unset.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorsRisksDiffResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/vendors/questionnaires": {
      "get": {
        "description": "Returns a list of currently open questionnaire risks for one or more of an account's watched vendors. Please note this version of the endpoint has been deprecated, and v2 should be used instead.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire",
        "operationId": "vendor_questionnaire_risks",
        "deprecated": true,
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Restricts the questionnaire risks returned to a specific watched vendor by ID",
            "name": "vendor_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname",
            "name": "primary_hostname",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Restricts the questionnaire risks returned to a specific questionnaire by ID",
            "name": "questionnaire_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of risks to return per page.\nThis Integer between 10 and 2000 defaults to 1000 if not supplied.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorQuestionnaireRisksResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/risks/vendors/questionnaires/v2": {
      "get": {
        "description": "Returns a list of currently open questionnaire risks for one or more of an account's watched vendors, including information on whether waivers exist for each risk.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "risks"
        ],
        "summary": "(V2) Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire",
        "operationId": "vendor_questionnaire_risks_v2",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Restricts the questionnaire risks returned to a specific watched vendor by ID",
            "name": "vendor_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname",
            "name": "primary_hostname",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Restricts the questionnaire risks returned to a specific questionnaire by ID",
            "name": "questionnaire_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of risks to return per page.\nThis Integer between 10 and 2000 defaults to 1000 if not supplied.",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Indicates that waived risks should not be returned in the risk set",
            "name": "ignore_waived_risks",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorQuestionnaireRisksResponseV2"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiaries": {
      "get": {
        "description": "Returns a list of subsidiaries.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "Get a list of subsidiaries",
        "operationId": "subsidiaries",
        "responses": {
          "200": {
            "$ref": "#/responses/getSubsidiariesResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/domain": {
      "get": {
        "description": "Returns the details for a domain. It will return 422 when requesting details of an inactive domain.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "Retrieve details for a domain",
        "operationId": "subsidiary_domain_details",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to show the domain detail for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The hostname for which to return the details, e.g. \"upguard.com\"",
            "name": "hostname",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/domain/labels": {
      "put": {
        "description": "Assign labels to a domain. To remove all labels pass an empty list.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "Assign labels to a domain",
        "operationId": "subsidiary_domain_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to update the domain labels for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The hostname to update labels for",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the domain. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/domains": {
      "get": {
        "description": "Returns a list of domains for a subsidiary.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "List subsidiary domains",
        "operationId": "subsidiary_domains",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to show domains for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve active domains",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve inactive domains",
            "name": "inactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "domain",
              "active",
              "automated_score",
              "scanned_at"
            ],
            "type": "string",
            "default": "domain",
            "description": "The value to sort the domains by\n\nIf not specified will default to `domain` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/ip": {
      "get": {
        "description": "Returns the details of the IP address. It will return 422 when requesting details of an inactive IP address.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "Retrieve details for an IP address",
        "operationId": "subsidiary_ip_details",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to show the IP detail for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The IP address to get details for",
            "name": "ip",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIpDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/ip/labels": {
      "put": {
        "description": "Assign labels to an IP. To remove all labels pass an empty list.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "Assign labels to an IP",
        "operationId": "subsidiary_ip_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to update the IP labels for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The IP to update labels for",
            "name": "ip",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the IP. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/ips": {
      "get": {
        "description": "Returns a list of ips for a subsidiary.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "List subdiary ips",
        "operationId": "subsidiary_ips",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to show ips for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "ip",
              "owner",
              "country",
              "asn",
              "as_name",
              "automated_score"
            ],
            "type": "string",
            "default": "ip",
            "description": "The value to sort the IPs by\n\nIf not specified will default to `ip` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIPsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/subsidiary/ranges": {
      "get": {
        "description": "Returns a list of ip ranges for a subsidiary.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "subsidiaries"
        ],
        "summary": "List subsidiary ip ranges",
        "operationId": "subsidiary_ranges",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the subsidiary to show ranges for.",
            "name": "subsidiary_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "start",
              "end",
              "num_ips",
              "owner",
              "country",
              "asn",
              "as_name"
            ],
            "type": "string",
            "default": "num_ips",
            "description": "The value to sort the IP ranges by\n\nIf not specified will default to `num_ips` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRangesResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/typosquat": {
      "get": {
        "description": "Returns the list of enabled typosquatting domains.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "typosquat"
        ],
        "summary": "List typosquat domains",
        "operationId": "listTyposquatDomains",
        "responses": {
          "200": {
            "$ref": "#/responses/getTyposquatResponse"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/typosquat/details": {
      "get": {
        "description": "If the requested domain is not enabled a 404 will be returned.\nUse the /typosquat to retrieve the list of enabled domains first.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "typosquat"
        ],
        "summary": "Retrieve typosquat details for a domain.",
        "operationId": "typosquat_details",
        "parameters": [
          {
            "type": "string",
            "description": "The domain for which to return typosquat details. e.g. \"upguard.com\"",
            "name": "domain",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getTyposquatDetails"
          },
          "404": {
            "$ref": "#/responses/getTyposquatDetails404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor": {
      "get": {
        "description": "The following assertions are evaluated (in order) to determine whether you are licensed to view the vendor data (as soon as one assertion returns \"true\", the vendor data will be returned):\n1. You are currently monitoring the vendor in CyberRisk\n2. You have set \"start_monitoring\" to \"true\" AND are not currently monitoring all the vendors you are licensed for in CyberRisk\n3. You have set \"generate_ad_hoc_report\" to \"true\" and have not currently used your monthly allocation of ad-hoc reports in CyberRisk.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Get vendor details",
        "operationId": "vendor",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 123456789,
            "description": "The ID of the vendor for which to return vendor data. e.g. 123456789",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The hostname for which to return vendor data. e.g. \"upguard.com\".\nRequired when id is not specified. When id is specified this field will be ignored.",
            "name": "hostname",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When set to true, if you haven't already used your monthly allocation of ad-hoc reports,\ngenerate an ad-hoc report for the given vendor, and return the vendor data.",
            "name": "generate_ad_hoc_report",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "NOTE: deprecated (use vendor/monitor instead).\nWhen set to true, if the vendor is not already being monitored,\nand if you are not already monitoring all the vendors your are licensed for,\nstart monitoring the vendor, and return the vendor data.",
            "name": "start_monitoring",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "NOTE: deprecated (use vendor/monitor instead).\nThe labels to assign to the vendor if start monitoring set to true.\nIf you want to update the labels for an already monitored vendor use the /vendor/labels endpoint.",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "NOTE: deprecated (use vendor/monitor instead).\nThe tier to assign to the vendor if start monitoring is set to true.",
            "name": "tier",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Flag indicating whether the request should wait for scan results on new unknown vendors",
            "name": "wait_for_scan",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorResponse"
          },
          "202": {
            "$ref": "#/responses/getVendor202Response"
          },
          "402": {
            "$ref": "#/responses/getVendor402Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/additionalevidence": {
      "get": {
        "description": "Returns the body of one or more additional evidence documents that have been attached to a specific vendor.\nIf multiple additional evidence documents are requested, then by default the files are returned as a multi-part mime response.\nAlternately, the zip option can be used to return multiple files as a single zip archive",
        "produces": [
          "image/jpeg",
          "image/png",
          "application/octet-stream",
          "Required API key permissions: `VendorRisk` (select when creating API key in Account Settings)"
        ],
        "tags": [
          "vendors"
        ],
        "summary": "Retrieve (one or more) vendor additional evidence documents by id",
        "operationId": "additional_evidence",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "a comma-separated list of one or more additional evidence instances (by unique id)",
            "name": "evidence_ids",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "indicates that for multiple additional evidence requests, the files should be returned as a multi-file zip",
            "name": "zip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorAdditionalEvidenceResponse"
          },
          "300": {
            "$ref": "#/responses/multipleChoicesError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/additionalevidence/list": {
      "get": {
        "description": "Returns a list of additional evidence instances that have been uploaded against this vendor in chronological order of when they were uploaded.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor additional evidence instances",
        "operationId": "additional_evidences_list",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show additional evidence for.",
            "name": "vendor_primary_hostname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of results to return per page.\nValid values range from 10 to 2000.\nDefaults to 1000 if unset.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorAdditionalEvidencesResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/attributes": {
      "put": {
        "description": "Assign or update the attributes for a vendor. To remove an attribute use null as its value in the payload.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Assign or update the attributes for a vendor",
        "operationId": "vendor_update_attributes",
        "parameters": [
          {
            "name": "UpdateVendorAttributesV1RequestBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateVendorAttributesV1RequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/document": {
      "get": {
        "description": "Returns the body of one or more documents that have been attached to a specific vendor.\nIf multiple documents are requested, then by default the files are returned as a multi-part mime response.\nAlternately, the zip option can be used to return multiple files as a single zip archive",
        "produces": [
          "image/jpeg",
          "image/png",
          "application/octet-stream",
          "Required API key permissions: `VendorRisk` (select when creating API key in Account Settings)"
        ],
        "tags": [
          "vendors"
        ],
        "summary": "Retrieve (one or more) vendor documents by id",
        "operationId": "document",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "a comma-separated list of one or more documents (by unique id)",
            "name": "document_ids",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "indicates that for multiple document requests, the files should be returned as a multi-file zip",
            "name": "zip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorDocumentResponse"
          },
          "300": {
            "$ref": "#/responses/multipleChoicesError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/documents": {
      "get": {
        "description": "Returns a list of documents that have been uploaded against this vendor in chronological order of when they were uploaded.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor documents",
        "operationId": "documents",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show documents for.",
            "name": "vendor_primary_hostname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of results to return per page.\nValid values range from 10 to 2000.\nDefaults to 1000 if unset.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorDocumentsResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/domain": {
      "get": {
        "description": "Returns the details for a domain. It will return 422 when requesting details of an inactive domain.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Retrieve details for a domain",
        "operationId": "vendor_domain_details",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show the domain detail for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The hostname for which to return the details, e.g. \"upguard.com\"",
            "name": "hostname",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/domain/labels": {
      "put": {
        "description": "Assign labels to a domain. To remove all labels pass an empty list.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Assign labels to a domain",
        "operationId": "vendor_domain_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to update the domain labels for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The hostname to update labels for",
            "name": "hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the domain. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/domains": {
      "get": {
        "description": "Returns a list of domains for a vendor.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor domains",
        "operationId": "vendor_domains",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show domains for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve active domains",
            "name": "active",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Retrieve inactive domains",
            "name": "inactive",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "domain",
              "active",
              "automated_score",
              "scanned_at"
            ],
            "type": "string",
            "default": "domain",
            "description": "The value to sort the domains by\n\nIf not specified will default to `domain` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDomainsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/ip": {
      "get": {
        "description": "Returns the details of the IP address. It will return 422 when requesting details of an inactive IP address.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Retrieve details for an IP address",
        "operationId": "vendor_ip_details",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show the IP detail for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The IP address to get details for",
            "name": "ip",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIpDetailsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/ip/labels": {
      "put": {
        "description": "Assign labels to an IP. To remove all labels pass an empty list.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Assign labels to an IP",
        "operationId": "vendor_ip_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to update the IP labels for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The IP to update labels for",
            "name": "ip",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the IP. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/ips": {
      "get": {
        "description": "Returns a list of ips for a vendor.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor ips",
        "operationId": "vendor_ips",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show ips for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "ip",
              "owner",
              "country",
              "asn",
              "as_name",
              "automated_score"
            ],
            "type": "string",
            "default": "ip",
            "description": "The value to sort the IPs by\n\nIf not specified will default to `ip` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getIPsResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/labels": {
      "put": {
        "description": "Assign labels to a vendor. To remove all labels pass an empty list.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Assign labels to a vendor",
        "operationId": "vendor_update_labels",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to update labels for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the vendor. You can pass an empty array to remove all labels.",
            "name": "labels",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/monitor": {
      "post": {
        "description": "Request will fail if you are currently monitoring all the vendors you are licensed for in CyberRisk.",
        "tags": [
          "vendors"
        ],
        "summary": "Start monitoring a vendor",
        "operationId": "monitorvendor",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 123456789,
            "description": "The ID of the vendor to begin monitoring. e.g. 123456789",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The hostname of the vendor to be monitored. e.g. \"upguard.com\".\nRequired when id is not specified. When id is specified this field will be ignored.",
            "name": "hostname",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The labels to assign to the vendor.\nIf you want to update the labels for an already monitored vendor use the /vendor/labels endpoint.",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The tier to assign to the vendor.",
            "name": "tier",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Flag indicating whether the request should wait for scan results on new unknown vendors.",
            "name": "wait_for_scan",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/monitorVendorResponse"
          },
          "202": {
            "$ref": "#/responses/monitorVendor202Response"
          },
          "402": {
            "$ref": "#/responses/monitorVendor402Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaire": {
      "post": {
        "description": "Request a vendor questionnaire to be sent to one or more nominated email addresses.\nVendor must be already monitored in UpGuard.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)\n\nThe following merge tags are supported for email_title and email_subject text:\n+ Vendor name {{VendorName}}\n+ Account name {{AccountName}}\n+ Questionnaire type {{QuestionnaireType}}",
        "tags": [
          "vendors"
        ],
        "summary": "Send a security questionnaire to a vendor",
        "operationId": "sendQuestionnaire",
        "parameters": [
          {
            "name": "PostVendorQuestionnaireBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostVendorQuestionnaireBody"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sendQuestionnaireResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaire/attachment": {
      "get": {
        "description": "Returns the body of one or more questionnaire attachments that have been attached to a one or more vendor questionnaire instances.\nIf multiple attachments are requested, then by default the files are returned as a multi-part mime response.\nAlternately, the zip option can be used to return multiple files as a single zip archive",
        "produces": [
          "image/jpeg",
          "image/png",
          "application/octet-stream",
          "Required API key permissions: `VendorRisk` (select when creating API key in Account Settings)"
        ],
        "tags": [
          "vendors"
        ],
        "summary": "Retrieve (one or more) vendor questionnaire attachments by id",
        "operationId": "attachment",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "a comma-separated list of one or more attachments (by unique id)",
            "name": "attachment_ids",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "indicates that for multiple attachment requests, the files should be returned as a multi-file zip",
            "name": "zip",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorAttachmentResponse"
          },
          "300": {
            "$ref": "#/responses/multipleChoicesError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaire/attachment/list": {
      "get": {
        "description": "Returns a list of questionnaire attachments that have been attached to a specific questionnaire instance in chronological order of when they were uploaded.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor questionnaire attachments",
        "operationId": "attachments",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The id of the specific questionnaire of whose attachments are of interest",
            "name": "questionnaire_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of results to return per page.\nValid values range from 10 to 2000.\nDefaults to 1000 if unset.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorQuestionnaireAttachmentsResponse"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaire_types": {
      "get": {
        "description": "Required API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List available vendor questionnaire types",
        "operationId": "getquestionnairetypes",
        "responses": {
          "200": {
            "$ref": "#/responses/getQuestionnaireTypesResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaires": {
      "get": {
        "description": "Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor questionnaires",
        "operationId": "questionnaires",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to which the questionnaires were sent.",
            "name": "vendor_primary_hostname",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of results to return per page.\nValid values range from 10 to 2000.\nDefaults to 1000 if unset.",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The usage type of questionnaires to return\nValid values: security, relationship\nDefaults to 'security' if not set",
            "name": "usage_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorQuestionnairesV1Response"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/questionnaires/v2": {
      "get": {
        "description": "Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor questionnaires",
        "operationId": "questionnairesV2",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to which the questionnaires were sent.",
            "name": "vendor_primary_hostname",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The id of the vendor to which the questionnaires were sent.",
            "name": "vendor_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The usage type of questionnaires to return\nValid values: security, relationship\nDefaults to 'security' if not set",
            "name": "usage_type",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Optionally exclude archived questionnaires",
            "name": "exclude_archived",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorQuestionnairesV2Response"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/ranges": {
      "get": {
        "description": "Returns a list of ip ranges for a vendor.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List vendor ip ranges",
        "operationId": "vendor_ranges",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to show ips for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `page_token` from a previous request, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          },
          {
            "enum": [
              "start",
              "end",
              "num_ips",
              "owner",
              "country",
              "asn",
              "as_name"
            ],
            "type": "string",
            "default": "num_ips",
            "description": "The value to sort the IP ranges by\n\nIf not specified will default to `num_ips` and set `sort_desc` to `true`",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether or not to sort the results in descending order",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRangesResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/relationship_questionnaire": {
      "post": {
        "description": "Request a vendor relationship questionnaire to be sent to a nominated email address.\nVendor must be already monitored in UpGuard\n\nA relationship questionnaire must be set up (in UpGuard) prior to the request.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Send a relationship questionnaire about a vendor",
        "operationId": "sendrelationshipquestionnaire",
        "parameters": [
          {
            "name": "PostVendorRelationshipQuestionnaireBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostVendorRelationshipQuestionnaireBody"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sendRelationshipQuestionnaireResponse"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/tier": {
      "put": {
        "description": "Assign tier to a vendor. To remove a tier pass a value of zero.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "Assign tier to a vendor",
        "operationId": "vendor_update_tier",
        "parameters": [
          {
            "type": "string",
            "description": "The primary hostname of the vendor to update tier for.",
            "name": "vendor_primary_hostname",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The tier to assign to the vendor. You can pass a value of zero to remove a tier",
            "name": "tier",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": " Successful response is empty"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendor/unmonitor": {
      "post": {
        "description": "A vendor will be removed from the monitored vendors list of the account.",
        "tags": [
          "vendors"
        ],
        "summary": "Stop monitoring a vendor",
        "operationId": "unmonitorvendor",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "example": 123456789,
            "description": "The ID of the vendor to stop monitoring. e.g. 123456789",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The hostname of the vendor to stop monitoring. e.g. \"upguard.com\"\nRequired when id is not specified. When id is specified this field will be ignored.",
            "name": "hostname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/unMonitorVendor200Response"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vendors": {
      "get": {
        "description": "If the include_ad_hoc_reports parameter is set to true then vendors with ad hoc reports available will also be returned.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vendors"
        ],
        "summary": "List monitored vendors",
        "operationId": "vendors",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Include vendors with an existing ad hoc report in the results.",
            "name": "include_ad_hoc_reports",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The token of the page to be returned.\nWill return the first page if left blank.",
            "name": "page_token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The number of results to return per page.\nValid values range from 10 to 2000.\nDefaults to 1000 if unset.",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter result by the provided labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Include risks",
            "name": "include_risks",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorsResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vulnerabilities": {
      "get": {
        "description": "Returns a list of potential vulnerabilities that have been detected for your account.\n\nRequired API key permissions: `BreachSight` (select when creating API key in Account Settings)",
        "tags": [
          "vulnerabilities"
        ],
        "summary": "List potential vulnerabilities of your domains & IPs",
        "operationId": "org_vulnerabilities",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A case-insensitive comma separated list of website labels to filter results by",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The `next_page_token` from a previous response, use this to get the next page of results.",
            "name": "page_token",
            "in": "query"
          },
          {
            "maximum": 2000,
            "minimum": 10,
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "description": "The number of results to return per page.",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getOrgVulnerabilitiesResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/vulnerabilities/vendor": {
      "get": {
        "description": "Returns a list of potential vulnerabilities that have been detected for a particular vendor.\n\nRequired API key permissions: `VendorRisk` (select when creating API key in Account Settings)",
        "tags": [
          "vulnerabilities"
        ],
        "summary": "List potential vulnerabilities of a vendor",
        "operationId": "vendor_vulnerabilities",
        "parameters": [
          {
            "type": "string",
            "example": "upguard.com",
            "description": "The primary hostname of the vendor to return vulnerabilities for",
            "name": "primary_hostname",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getVendorVulnerabilitiesResponse"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "description": "List all registered webhooks.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "webhooks"
        ],
        "summary": "List webhooks",
        "operationId": "list_webhooks",
        "responses": {
          "200": {
            "$ref": "#/responses/listWebhooksV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "post": {
        "description": "Create a new webhook subscribing to the provided list of notifications.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "webhooks"
        ],
        "summary": "Create a new webhook",
        "operationId": "create_webhook",
        "parameters": [
          {
            "type": "string",
            "description": "The name given to the webhook",
            "name": "name",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The URL used for sending notifications",
            "name": "hook_url",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of notifications to subscribe to. For a list of supported notification\ntypes and their IDs use the /api/public/webhooks/notification_types endpoint.",
            "name": "notification_type_ids",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "webhook"
            ],
            "type": "string",
            "default": "webhook",
            "description": "The type of webhook to create",
            "name": "webhook_type",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createWebhookV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "422": {
            "$ref": "#/responses/invalidParametersError"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      },
      "delete": {
        "description": "Delete a webhook by ID.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "webhooks"
        ],
        "summary": "Delete a webhook",
        "operationId": "delete_webhook",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the webhook to delete",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/deleteWebhookV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "404": {
            "$ref": "#/responses/notFound404Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/webhooks/notification_types": {
      "get": {
        "description": "Get a list of available webhook notification types and their descriptions for your organisation.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "webhooks"
        ],
        "summary": "Webhook notification types",
        "operationId": "webhooks_notification_types",
        "responses": {
          "200": {
            "$ref": "#/responses/getWebhookNotificationTypesV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    },
    "/webhooks/sample": {
      "get": {
        "description": "Get the example data for one or more notification types.\n\nRequired API key permissions: `Admin` (select when creating API key in Account Settings)",
        "tags": [
          "webhooks"
        ],
        "summary": "Webhook example data",
        "operationId": "sample_webhook",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of a webhook. If specified sample data for all the\nnotification types registered for that webhook will be returned.",
            "name": "id",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of notification type IDs you need sample data for.\nIf a webhook ID is provided this parameter is ignored.",
            "name": "notification_type_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/exampleDataWebhookV1Response"
          },
          "403": {
            "$ref": "#/responses/apiKeyInsufficientPermissions403Error"
          },
          "429": {
            "$ref": "#/responses/tooManyRequests429Error"
          },
          "500": {
            "$ref": "#/responses/internalSystemError"
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "children": {
          "$ref": "#/definitions/AccountHierarchy"
        },
        "name": {
          "description": "The name of the account",
          "type": "string"
        },
        "primary_domain": {
          "description": "The primary domain of the account",
          "type": "string"
        }
      }
    },
    "AccountHierarchy": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Account"
      }
    },
    "ApiRange": {
      "type": "object",
      "properties": {
        "as_name": {
          "description": "The name of the AS the range belongs to. If no AS is available for a range this field will be omitted.",
          "type": "string"
        },
        "asn": {
          "description": "The ASN the range belongs to. If no ASN is available for a range this field will be omitted.",
          "type": "integer",
          "format": "int64"
        },
        "country": {
          "description": "The country the range belongs to. If no country is available for a range this field will be omitted.",
          "type": "string"
        },
        "end": {
          "description": "The range end.",
          "type": "string"
        },
        "labels": {
          "description": "The labels associated with the range.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "num_ips": {
          "description": "The number of IPs in this range",
          "type": "integer",
          "format": "int64"
        },
        "owner": {
          "description": "The owner of the range.",
          "type": "string"
        },
        "sources": {
          "description": "The sources of the range.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPSource"
          }
        },
        "start": {
          "description": "The range start.",
          "type": "string"
        }
      }
    },
    "AvailableRisk": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the risk",
          "type": "string"
        },
        "description": {
          "description": "Description or context surrounding the risk",
          "type": "string"
        },
        "finding": {
          "description": "Description of the finding",
          "type": "string"
        },
        "group": {
          "description": "The risk group",
          "type": "string"
        },
        "id": {
          "description": "The ID of the risk",
          "type": "string"
        },
        "remediation": {
          "description": "Remediation recommendation",
          "type": "string"
        },
        "risk": {
          "description": "The risk title",
          "type": "string"
        },
        "riskDetails": {
          "description": "Detailed description of the risk",
          "type": "string"
        },
        "severity": {
          "description": "The severity of the risk",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "AvailableRiskV2": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the risk. This field will be omitted for generic risks",
          "type": "string",
          "example": "dns"
        },
        "description": {
          "description": "Description or context surrounding the risk. This field will be omitted for generic risks",
          "type": "string",
          "example": "Domains must be renewed within specified intervals to maintain ownership of the name. The minimum interval is 1 year and the maximum interval is 10 years. If a domain is not renewed within the appropriate interval, the domain name becomes “expired.” There is a 30 day grace period where the domain owner can still renew the expired domain name. After that, the domain can be purchased by a third party"
        },
        "finding": {
          "description": "Description of the finding. This field will be omitted for generic risks",
          "type": "string",
          "example": "Domain expired"
        },
        "generic": {
          "description": "Flag indicating whether the risks is a generic risk, i.e. a risk where severity,\ncategory, finding etc. depend on other parameters",
          "type": "boolean",
          "example": false
        },
        "group": {
          "description": "The risk group",
          "type": "string",
          "example": "domain"
        },
        "id": {
          "description": "The ID of the risk",
          "type": "string",
          "example": "domain_expired"
        },
        "remediation": {
          "description": "Remediation recommendation. This field will be omitted for generic risks",
          "type": "string",
          "example": "The domain should be renewed as soon as possible with the registrar. Domains can be configured with auto-renewal to ensure that they are renewed before the expiration date"
        },
        "risk": {
          "description": "The risk title",
          "type": "string",
          "example": "Domain at risk of being hijacked"
        },
        "riskDetails": {
          "description": "Detailed description of the risk. This field will be omitted for generic risks",
          "type": "string",
          "example": "This domain is expired. An expired domain is no longer functional. Any services relying on the expired domain will become unavailable. In addition to the loss of functionality, expired domains can be snapped up quickly by third parties and used to drive traffic to malicious and fraudulent websites"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "severity": {
          "description": "The severity of the risk. This field will be omitted for generic risks",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ],
          "example": "critical"
        }
      }
    },
    "Breach": {
      "type": "object",
      "properties": {
        "assignee_user_email": {
          "description": "The email address of the currently assigned user. Will be blank if unassigned.",
          "type": "string",
          "example": "viggo@example.com"
        },
        "breach_type": {
          "description": "The type of the breach. Will be one of \"Company\", \"Infostealer\", or \"Paste\".",
          "type": "string",
          "example": "Company"
        },
        "date_occurred": {
          "description": "The date the breach occurred (ISO 3339 format)",
          "type": "string",
          "format": "date-time",
          "example": "2019-11-09T03:48:57Z"
        },
        "date_published": {
          "description": "The date the breach was published (ISO 3339 format)",
          "type": "string",
          "format": "date-time",
          "example": "2019-11-09T03:48:57Z"
        },
        "description": {
          "description": "The description of the breach",
          "type": "string",
          "example": "In November 2019, all customer records of Acme Inc. were made publicly available for 13 hours."
        },
        "domain": {
          "description": "The domain of the breach",
          "type": "string",
          "example": "acme.com"
        },
        "exposed_data_classes": {
          "description": "The classes of data exposed in this breach eg. \"Passwords\", \"Usernames\", \"Email addresses\", \"Social security numbers\", \"Banking PINs\", \"Credit cards\".",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Passwords",
            "Usernames",
            "Email addresses",
            "Social security numbers",
            "Banking PINs",
            "Credit cards"
          ]
        },
        "id": {
          "description": "The internal id of the breach",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "The name of the breach",
          "type": "string",
          "example": "AcmeInc"
        },
        "title": {
          "description": "The title of the breach",
          "type": "string",
          "example": "Acme Inc."
        },
        "total_exposures": {
          "description": "The total number of identities in the breach",
          "type": "integer",
          "format": "int64",
          "example": 9673824
        }
      }
    },
    "BreachComment": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "The text of the comment",
          "type": "string",
          "example": "My comment text"
        },
        "created_at": {
          "description": "The time the comment was added",
          "type": "string",
          "format": "date-time",
          "example": "2019-11-09T03:48:57Z"
        },
        "created_by_email": {
          "description": "The email address of the user who added the comment",
          "type": "string",
          "example": "viggo@example.com"
        }
      }
    },
    "BreachedIdentitiesResponsePayloadBody": {
      "type": "object",
      "properties": {
        "breached_identities": {
          "description": "The list of breached identities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BreachedIdentity"
          }
        },
        "breaches": {
          "description": "The list of breaches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breach"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of breached identities found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BreachedIdentity": {
      "type": "object",
      "properties": {
        "breach_ids": {
          "description": "The IDs of the breaches the identity is associated with",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "example": [
            42,
            89
          ]
        },
        "domain": {
          "description": "The breached identity domain",
          "type": "string",
          "example": "example.com"
        },
        "id": {
          "description": "The internal id of the identity",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "last_breach_date": {
          "description": "The date of the most recent breach (RFC 3339 format)",
          "type": "string",
          "format": "date-time",
          "example": "2019-11-09T03:48:57Z"
        },
        "name": {
          "description": "The breached identity name",
          "type": "string",
          "example": "jane.smith"
        },
        "num_breaches": {
          "description": "The total number of breaches the identity has been in",
          "type": "integer",
          "format": "int64",
          "example": 42
        }
      }
    },
    "BulkDeregisterHostnamesV1RequestBody": {
      "type": "object",
      "properties": {
        "hostnames": {
          "description": "The hostnames to deregister. Currently, a maximum of 1000 hostnames in a single request is supported.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          },
          "example": [
            "8.8.8.8",
            "example.com"
          ]
        }
      }
    },
    "BulkDeregisterHostnamesV1ResponseBody": {
      "type": "object",
      "properties": {
        "deregistered": {
          "description": "The number of deregistered hostnames.",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "remaining": {
          "description": "The number of remaining slots.",
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "BulkGetHostnamesStatsV1ResponseBody": {
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of active hostnames.",
          "type": "integer",
          "format": "int64",
          "example": 900
        },
        "inactive": {
          "description": "The number of inactive hostnames.",
          "type": "integer",
          "format": "int64",
          "example": 100
        },
        "registered": {
          "description": "The number of registered hostnames.",
          "type": "integer",
          "format": "int64",
          "example": 1000
        },
        "remaining": {
          "description": "The number of remaining available slots.",
          "type": "integer",
          "format": "int64",
          "example": 9000
        }
      }
    },
    "BulkHostname": {
      "type": "object",
      "properties": {
        "active": {
          "description": "The active state of the hostname. These will be omitted if the omit_scan_info query parameter is true.",
          "type": "boolean",
          "example": true
        },
        "automated_score": {
          "description": "The automated score of the hostname. This will be omitted if the omit_scan_info query parameter is true.",
          "type": "integer",
          "format": "int64",
          "maximum": 950,
          "minimum": 0,
          "example": 800
        },
        "hostname": {
          "description": "The name of the hostname.",
          "type": "string",
          "format": "hostname"
        },
        "labels": {
          "description": "The list of labels associated with the hostname. This will be omitted if the omit_labels query parameter is true.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "network",
            "data"
          ]
        },
        "last_scanned_at": {
          "description": "The timestamp this hostname was last scanned at.",
          "type": "string",
          "format": "date-time"
        },
        "risks": {
          "description": "The list of risks associated with the hostname. These will be omitted if the omit_scan_info query parameter is true.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkRisk"
          }
        },
        "vendor": {
          "$ref": "#/definitions/BulkVendor"
        }
      }
    },
    "BulkListHostnamesV1ResponseBody": {
      "type": "object",
      "properties": {
        "hostnames": {
          "description": "The list of hostnames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkHostname"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results. It will not be returned if there are no more results.",
          "type": "string",
          "example": "123456789"
        },
        "total_results": {
          "description": "The total number of hostnames found.",
          "type": "integer",
          "format": "int64",
          "example": 1000
        }
      }
    },
    "BulkRegisterHostnamesV1RequestBody": {
      "type": "object",
      "properties": {
        "hostnames": {
          "description": "The hostnames to register. Currently, a maximum of 1000 hostnames in a single request is supported.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          },
          "example": [
            "8.8.8.8",
            "example.com"
          ]
        },
        "labels": {
          "description": "The labels to add to the registered hostnames. If they don't exist they will be created.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "network",
            "data"
          ]
        }
      }
    },
    "BulkRegisterHostnamesV1ResponseBody": {
      "type": "object",
      "properties": {
        "registered": {
          "description": "The number of newly registered hostnames.",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "remaining": {
          "description": "The number of remaining slots.",
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "BulkRisk": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The risk category identifier",
          "type": "string",
          "enum": [
            "website_sec",
            "email_sec",
            "network_sec",
            "ip_domain_reputation",
            "brand_protect",
            "attack_surface",
            "dns",
            "vulnerability_management",
            "data_leakage",
            "encryption",
            "questionnaire_risks",
            "vulns",
            "typosquatting",
            "emailexposures",
            "dataleaks",
            "additional_evidence"
          ],
          "example": "vulnerability_management"
        },
        "description": {
          "description": "A long description of the risk",
          "type": "string",
          "example": "Remote code execution exploit chain consisting of 3 vulnerabilities in Microsoft Exchange Server: CVE-2021-34473, CVE-2021-34523 and CVE-2021-31207"
        },
        "finding": {
          "description": "A short description of the finding",
          "type": "string",
          "example": "Vulnerable to CVE-2021-34473 (ProxyShell)"
        },
        "id": {
          "description": "The risk identifier",
          "type": "string",
          "example": "verified_vuln:CVE-2021-34473"
        },
        "risk": {
          "description": "A short description of the risk",
          "type": "string",
          "example": "Vulnerabilities"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "severity": {
          "description": "The risk severity",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ],
          "example": "critical"
        }
      }
    },
    "BulkVendor": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the vendor.",
          "type": "integer",
          "format": "int64",
          "example": 123456789
        },
        "name": {
          "description": "The name of the vendor.",
          "type": "string",
          "example": "Example Industries"
        },
        "primary_hostname": {
          "description": "The primary hostname of the vendor.",
          "type": "string",
          "format": "hostname",
          "example": "example.com"
        }
      }
    },
    "Category": {
      "description": "Category values cannot be changed after first use, as they're referenced in storage.",
      "type": "string",
      "title": "Category values represent risk categories."
    },
    "CategoryRiskCounts": {
      "description": "The count of risks, broken down by category, then by severity",
      "type": "object",
      "properties": {
        "attack_surface": {
          "$ref": "#/definitions/RiskCounts"
        },
        "brand_protection": {
          "$ref": "#/definitions/RiskCounts"
        },
        "brand_reputation": {
          "$ref": "#/definitions/RiskCounts"
        },
        "data_leakage": {
          "$ref": "#/definitions/RiskCounts"
        },
        "dns": {
          "$ref": "#/definitions/RiskCounts"
        },
        "email_security": {
          "$ref": "#/definitions/RiskCounts"
        },
        "encryption": {
          "$ref": "#/definitions/RiskCounts"
        },
        "ip_domain_reputation": {
          "$ref": "#/definitions/RiskCounts"
        },
        "network_security": {
          "$ref": "#/definitions/RiskCounts"
        },
        "phishing": {
          "$ref": "#/definitions/RiskCounts"
        },
        "questionnaires": {
          "$ref": "#/definitions/RiskCounts"
        },
        "vulnerability_management": {
          "$ref": "#/definitions/RiskCounts"
        },
        "website_security": {
          "$ref": "#/definitions/RiskCounts"
        }
      }
    },
    "CategoryScores": {
      "description": "A collection of category scores for a vendor",
      "type": "object",
      "properties": {
        "attackSurface": {
          "type": "integer",
          "format": "int64"
        },
        "brandProtection": {
          "description": "DEPRECATED: Use brandReputation",
          "type": "integer",
          "format": "int64"
        },
        "brandReputation": {
          "type": "integer",
          "format": "int64"
        },
        "dataLeakage": {
          "type": "integer",
          "format": "int64"
        },
        "dns": {
          "type": "integer",
          "format": "int64"
        },
        "emailSecurity": {
          "type": "integer",
          "format": "int64"
        },
        "encryption": {
          "type": "integer",
          "format": "int64"
        },
        "ipDomainReputation": {
          "type": "integer",
          "format": "int64"
        },
        "networkSecurity": {
          "type": "integer",
          "format": "int64"
        },
        "phishing": {
          "description": "DEPRECATED: Use ipDomainReputation",
          "type": "integer",
          "format": "int64"
        },
        "questionnaires": {
          "type": "integer",
          "format": "int64"
        },
        "vulnerabilityManagement": {
          "type": "integer",
          "format": "int64"
        },
        "websiteSecurity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CheckResult": {
      "type": "object",
      "properties": {
        "actual": {
          "description": "The found properties of the check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "checked_at": {
          "description": "The time the check was performed in RFC3339 format",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the check performed",
          "type": "string"
        },
        "expected": {
          "description": "The expected properties of the check",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "id": {
          "description": "The ID of the check",
          "type": "string"
        },
        "pass": {
          "description": "Flag indicating whether the check passed or not",
          "type": "boolean"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "severityName": {
          "description": "The severity fo the risk in human-readable form",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "sources": {
          "description": "Sources contains information about the source of a check\ne.g. the IP addresses it was found on, or a domain name",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "description": "The title of the check",
          "type": "string"
        }
      }
    },
    "CreateWebhookResponsePayload": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the created webhook",
          "type": "string",
          "example": "ABCD1234"
        }
      }
    },
    "CustomReportData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "CustomReportsListResponsePayloadBody": {
      "type": "object",
      "required": [
        "custom_reports"
      ],
      "properties": {
        "custom_reports": {
          "description": "List of custom reports defined for the account",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomReportData"
          }
        }
      }
    },
    "DataLeaksDisclosure": {
      "type": "object",
      "properties": {
        "date_disclosed": {
          "description": "The date this disclosure was created (RFC 3339)",
          "type": "string",
          "format": "date-time",
          "example": "2019-11-09T03:48:57Z"
        },
        "description": {
          "description": "Description of the disclosure",
          "type": "string",
          "example": "Leaked WordPress DB credentials"
        },
        "id": {
          "description": "The ID of the disclosure",
          "type": "integer",
          "format": "int64",
          "example": 3426
        },
        "image": {
          "description": "An image/screenshot of the disclosure",
          "type": "string",
          "example": "data:image/png;base64,..."
        },
        "implication": {
          "description": "The nature of the risk",
          "type": "string",
          "example": "Exposed credentials"
        },
        "payload": {
          "description": "The JSON payload of the finding, if applicable",
          "type": "string",
          "example": "{}"
        },
        "severity": {
          "description": "The severity of the disclosure, between 1 and 10",
          "type": "integer",
          "format": "int64",
          "example": 7
        },
        "significance": {
          "description": "A more detailed explanation of the significance/severity of the disclosure",
          "type": "string",
          "example": "These credentials are three years old. If they have not been changed, they could provide access to user data."
        },
        "source": {
          "description": "The person or source the finding has been attributed to",
          "type": "string",
          "example": "The file's owner is john.doe"
        },
        "status": {
          "description": "Current status of the disclosure",
          "type": "string",
          "example": "Disclosed"
        },
        "url": {
          "description": "The URL to the finding",
          "type": "string",
          "example": "http://wordpresssite.com/wp_config.bak"
        }
      }
    },
    "DataLeaksDisclosuresResponsePayloadBody": {
      "type": "object",
      "properties": {
        "disclosures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataLeaksDisclosure"
          }
        }
      }
    },
    "DeleteWebhookResponsePayload": {
      "type": "object"
    },
    "Diff": {
      "type": "object",
      "properties": {
        "dateA": {
          "description": "The date of the first scan (RFC 3339 format)",
          "type": "string",
          "format": "date-time"
        },
        "dateB": {
          "description": "The date of the second scan (RFC 3339 format)",
          "type": "string",
          "format": "date-time"
        },
        "expected": {
          "description": "The expected status",
          "type": "string"
        },
        "hostname": {
          "description": "The domain name or IP address experiencing the risk diff",
          "type": "string"
        },
        "metaValueA": {
          "description": "Metadata for the result of the first check",
          "type": "string"
        },
        "metaValueB": {
          "description": "Metadata for the result of the second check",
          "type": "string"
        },
        "prevProvisionalID": {
          "description": "Previous provisional ID if the last scan contained it",
          "type": "string"
        },
        "property": {
          "description": "The property checked",
          "type": "string"
        },
        "statusA": {
          "$ref": "#/definitions/DiffStatus"
        },
        "statusB": {
          "$ref": "#/definitions/DiffStatus"
        }
      }
    },
    "DiffStatus": {
      "type": "string"
    },
    "Diffs": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Diff"
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "active": {
          "description": "The status of the domain",
          "type": "boolean"
        },
        "automated_score": {
          "description": "The score of the domain. If the domain is active or hasn't been scanned yet this field will be absent",
          "type": "integer",
          "format": "int64"
        },
        "hostname": {
          "description": "The hostname",
          "type": "string"
        },
        "labels": {
          "description": "The labels associated with the domain",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary_domain": {
          "description": "Flag indicating the primary domain for the account",
          "type": "boolean"
        },
        "scanned_at": {
          "description": "The time the domain was scanned. If the domain is inactive or hasn't been scanned yet this field will be absent",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DomainScore": {
      "type": "object",
      "properties": {
        "automated_score": {
          "description": "The score of the domain",
          "type": "integer",
          "format": "int64"
        },
        "hostname": {
          "description": "The hostname of the domain",
          "type": "string"
        }
      }
    },
    "ExampleDataWebhookResponsePayload": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/WebhookSampleData"
      }
    },
    "File": {
      "type": "object",
      "title": "File represents an uploaded file.",
      "properties": {
        "Data": {
          "$ref": "#/definitions/File"
        },
        "Header": {
          "$ref": "#/definitions/FileHeader"
        }
      }
    },
    "FileHeader": {
      "type": "object",
      "title": "A FileHeader describes a file part of a multipart request.",
      "properties": {
        "Filename": {
          "type": "string"
        },
        "Header": {
          "$ref": "#/definitions/MIMEHeader"
        },
        "Size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetDomainDetailsV1RespBody": {
      "type": "object",
      "properties": {
        "a_records": {
          "description": "The list of A records associated with the domain. This field will be omitted if no A records were associated with the domain",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "automated_score": {
          "description": "The score for the domain. If the domain has not been scanned or no score is present this field will be omitted.",
          "type": "integer",
          "format": "int64"
        },
        "check_results": {
          "description": "The results of the domain scan. This field will be omitted if the domain has not been scanned or no results are available.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckResult"
          }
        },
        "hostname": {
          "description": "The hostname of the domain",
          "type": "string"
        },
        "labels": {
          "description": "The labels associated with the domain. This field will be omitted if no labels are present.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scanned_at": {
          "description": "The time the domain was scanned in RFC3339 format",
          "type": "string",
          "format": "date-time"
        },
        "waived_check_results": {
          "description": "The waived risks for this domain. This field will be omitted if no waived risks are present.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckResult"
          }
        }
      }
    },
    "GetDomainsV1RespBody": {
      "type": "object",
      "properties": {
        "domains": {
          "description": "The list of domains",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of domains found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetIPsV1RespBody": {
      "type": "object",
      "properties": {
        "ips": {
          "description": "The list of ips",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IP"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of ips found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetIpDetailsV1RespBody": {
      "type": "object",
      "properties": {
        "as_name": {
          "description": "The name of the AS the IP belongs to. If no AS is available for an IP this field will be omitted.",
          "type": "string"
        },
        "asn": {
          "description": "The ASN the IP belongs to. If no ASN is available for an IP this field will be omitted.",
          "type": "integer",
          "format": "int64"
        },
        "automated_score": {
          "description": "The score of the ip. If the ip is inactive or hasn't been scanned yet this field will be absent",
          "type": "integer",
          "format": "int64"
        },
        "check_results": {
          "description": "The results of the IP scan. This field will be omitted if the IP has not been scanned or no results are available, e.g. DNS source IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckResult"
          }
        },
        "country": {
          "description": "The country the IP belongs to. If no country is available for an IP this field will be omitted.",
          "type": "string"
        },
        "domains": {
          "description": "The list of domains associated with this IP. This field will be omitted if no domains are associated with the IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainScore"
          }
        },
        "ip": {
          "description": "The IP.",
          "type": "string"
        },
        "labels": {
          "description": "The labels associated with the IP.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "description": "The owner of the IP.",
          "type": "string"
        },
        "services": {
          "description": "The list of discovered services IP. If no services were detected for the IP this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "description": "The sources of the IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPSource"
          }
        },
        "waived_check_results": {
          "description": "The waived risks for this IP. This field will be omitted if no waived risks are present.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckResult"
          }
        }
      }
    },
    "GetLabelsV1RespBody": {
      "type": "object",
      "properties": {
        "labels": {
          "description": "The list of available labels",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetNotificationsV1ResponsePayloadBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results. The field will be missing if there are no results.",
          "type": "string"
        },
        "notifications": {
          "description": "The list of notifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        }
      }
    },
    "GetOrgVulnerabilitiesV1RespBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "vulnerabilities": {
          "description": "The list of potential vulnerabilities that have been detected",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vulnerability"
          }
        }
      }
    },
    "GetOrganisationV1RespBody": {
      "type": "object",
      "properties": {
        "automatedScore": {
          "description": "The automated score of the organisation. Omitted if no current scanning score.",
          "type": "integer",
          "format": "int64"
        },
        "categoryScores": {
          "$ref": "#/definitions/CategoryScores"
        },
        "id": {
          "description": "The id of the organisation",
          "type": "integer",
          "format": "int64",
          "example": 12345678
        },
        "name": {
          "description": "The name of the organisation",
          "type": "string",
          "example": "UpGuard"
        },
        "primary_hostname": {
          "description": "The primary hostname of the organisation",
          "type": "string",
          "example": "upguard.com"
        }
      }
    },
    "GetRangesV1RespBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "ranges": {
          "description": "The list of ranges",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiRange"
          }
        },
        "total_results": {
          "description": "The total number of ranges found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetRisksV1RespBody": {
      "type": "object",
      "properties": {
        "risks": {
          "description": "The list of vendor risks that have been detected.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Risk"
          }
        }
      }
    },
    "GetSubsidiariesV1RespBody": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "GetTyposquatDetailsResponsePayloadBody": {
      "type": "object",
      "properties": {
        "ignored": {
          "description": "The list of ignored permutations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatPermutationDetail"
          }
        },
        "registered": {
          "description": "The list of registered permutations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatPermutationDetail"
          }
        },
        "unregistered": {
          "description": "The list of unregistered permutations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatPermutationDetail"
          }
        }
      }
    },
    "GetTyposquatResponsePayloadBody": {
      "type": "object",
      "properties": {
        "domains": {
          "description": "The list of enabled typosquat domains",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatDomain"
          }
        }
      }
    },
    "GetVendorAdditionalEvidenceResponsePayload": {
      "type": "object",
      "properties": {
        "File": {
          "description": "The list of binary additional evidence documents requested for a vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "GetVendorAdditionalEvidencesResponsePayload": {
      "type": "object",
      "properties": {
        "additional_evidence": {
          "description": "The additional evidence uploaded for this vendor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/additional_evidences_list"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of vendors found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetVendorAttachmentResponsePayload": {
      "type": "object",
      "properties": {
        "File": {
          "description": "The list of binary attachments sent with the questionnaire response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "GetVendorDocumentResponsePayload": {
      "type": "object",
      "properties": {
        "File": {
          "description": "The list of binary documents requested for a vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/File"
          }
        }
      }
    },
    "GetVendorDocumentsResponsePayload": {
      "type": "object",
      "properties": {
        "documents": {
          "description": "The documents uploaded for this vendor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/document"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of vendors found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetVendorQuestionnaireAttachmentsResponsePayload": {
      "type": "object",
      "properties": {
        "attachments": {
          "description": "The list of questionnaires sent to this vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorQuestionnaireAttachment"
          }
        },
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of attachments found for the questionnaire.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GetVendorQuestionnairesV1ResponsePayload": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string",
          "example": "4"
        },
        "questionnaires": {
          "description": "The list of questionnaires sent to this vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/questionnaire"
          }
        },
        "total_results": {
          "description": "The total number of vendors found.",
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "GetVendorQuestionnairesV2ResponsePayload": {
      "type": "object",
      "properties": {
        "questionnaires": {
          "description": "The list of questionnaires sent to this vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/questionnaire"
          }
        },
        "shared_questionnaires": {
          "description": "The list of questionnaires shared by this vendor",
          "type": "array",
          "items": {
            "$ref": "#/definitions/shared_questionnaire"
          }
        }
      }
    },
    "GetVendorVulnerabilitiesV1RespBody": {
      "type": "object",
      "properties": {
        "vulnerabilities": {
          "description": "The list of potential vendor vulnerabilities that have been detected.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vulnerability"
          }
        }
      }
    },
    "GetWebhookNotificationTypesResponsePayload": {
      "type": "object",
      "properties": {
        "notification_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationType"
          }
        }
      }
    },
    "IP": {
      "type": "object",
      "properties": {
        "as_name": {
          "description": "The name of the AS the IP belongs to. If no AS is available for an IP this field will be omitted.",
          "type": "string"
        },
        "asn": {
          "description": "The ASN the IP belongs to. If no ASN is available for an IP this field will be omitted.",
          "type": "integer",
          "format": "int64"
        },
        "automated_score": {
          "description": "The score of the ip. If the ip is inactive or hasn't been scanned yet this field will be absent",
          "type": "integer",
          "format": "int64"
        },
        "country": {
          "description": "The country the IP belongs to. If no country is available for an IP this field will be omitted.",
          "type": "string"
        },
        "ip": {
          "description": "The IP.",
          "type": "string"
        },
        "labels": {
          "description": "The labels associated with the IP.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "description": "The owner of the IP.",
          "type": "string"
        },
        "services": {
          "description": "The list of discovered services IP. If no services were detected for the IP this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "description": "The sources of the IP.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPSource"
          }
        }
      }
    },
    "IPSource": {
      "type": "string"
    },
    "IdentityBreachResponsePayloadBody": {
      "type": "object",
      "properties": {
        "breach": {
          "$ref": "#/definitions/Breach"
        },
        "comments": {
          "description": "Comments associated with the identity breach",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BreachComment"
          }
        }
      }
    },
    "ListWebhookResponsePayload": {
      "type": "object",
      "properties": {
        "webhooks": {
          "description": "The list of registered webhooks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Webhook"
          }
        }
      }
    },
    "MIMEHeader": {
      "description": "A MIMEHeader represents a MIME-style header mapping\nkeys to sets of values.",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "context": {
          "description": "The context metadata for the notification.",
          "type": "object",
          "additionalProperties": {}
        },
        "description": {
          "description": "Description for the notification.",
          "type": "string",
          "example": "User published a new risk assessment for vendor 'UpGuard'"
        },
        "notification_id": {
          "description": "The ID of the notification.",
          "type": "string",
          "example": "20"
        },
        "occurred_at": {
          "description": "The time the notification was fired.",
          "type": "string",
          "format": "date-time",
          "example": "2023-10-13T02:40:00Z"
        },
        "type": {
          "description": "The type of the notification.",
          "type": "string",
          "example": "RiskAssessmentPublished"
        }
      }
    },
    "NotificationType": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Description for this notification type",
          "type": "string",
          "example": "When a new data leak is published"
        },
        "id": {
          "description": "ID of this notification type",
          "type": "string",
          "example": "10-0000-0000-0000000000000000"
        },
        "is_zapier": {
          "description": "Flag indicating whether the notification type is a zapier notification type",
          "type": "boolean",
          "example": true
        }
      }
    },
    "PermutationType": {
      "type": "string"
    },
    "PostVendorQuestionnaireBody": {
      "description": "Must contain exactly one of *vendor_id* or *vendor_primary_hostname*.",
      "type": "object",
      "title": "Body of the send questionnaire request.",
      "required": [
        "questionnaire_type_id",
        "sender_email",
        "due_date",
        "recipients",
        "risk_information_visiblity"
      ],
      "properties": {
        "due_date": {
          "description": "The date the questionnaire is due to be completed by.\n\nMust be a future ISO 8601 formatted date string (YYYY-MM-DD).",
          "type": "string",
          "example": "2024-11-20"
        },
        "email_message": {
          "description": "Optional message sent to the questionnaire recipient. If not provided, the organization's default message will be used.",
          "type": "string",
          "example": "Please complete the following questionnaire"
        },
        "email_title": {
          "description": "Optional email title sent to the questionnaire recipient. If not provided, the organization's default email title will be used.",
          "type": "string",
          "example": "Questionnaire"
        },
        "questionnaire_type_id": {
          "description": "Numeric ID of the questionnaire type to be sent.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "recipients": {
          "description": "The list of questionnaire recipients.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/questionnaireRecipient"
          },
          "example": [
            {
              "recipient_email": "security@upguard.com"
            }
          ]
        },
        "reminder_date": {
          "description": "The date to send a questionnaire reminder to the recipients.\n\nMust be a future ISO 8601 formatted date string (YYYY-MM-DD).",
          "type": "string",
          "example": "2024-11-16"
        },
        "risk_information_visiblity": {
          "description": "The visibility level of risk information in the questionnaire.",
          "type": "string",
          "enum": [
            "ShowAllRiskInformation",
            "HideSeverity",
            "HideAllRiskInformation"
          ],
          "example": "ShowAllRiskInformation"
        },
        "sender_email": {
          "description": "The email address of the questionnaire sender (must be an UpGuard user with full access to Vendor Risk or the portfolio containing the vendor).",
          "type": "string",
          "example": "vendor.user@upguard.com"
        },
        "vendor_id": {
          "description": "ID of the vendor the questionnaire is being sent to.\n\nThis, or *vendor_primary_hostname* must be provided.",
          "type": "integer",
          "format": "int64",
          "example": 123456789
        },
        "vendor_primary_hostname": {
          "description": "Primary hostname of the vendor the questionnaire is being sent to.\n\nThis, or *vendor_id* must be provided.",
          "type": "string",
          "example": "example.com"
        }
      }
    },
    "PostVendorRelationshipQuestionnaireBody": {
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the vendor the relationship questionnaire is about.",
          "type": "integer",
          "format": "int64",
          "example": 123456789
        },
        "message": {
          "description": "Optional message sent to the questionnaire recipient. If not provided, the organization's default message will be used.",
          "type": "string",
          "example": "Please complete the following questionnaire"
        },
        "recipient_email": {
          "description": "The email address of the questionnaire recipient (will be invited to your organization if not already a member).",
          "type": "string",
          "example": "security@upguard.com"
        },
        "sender_email": {
          "description": "The email address of the questionnaire sender (must be an UpGuard user with full access to Vendor Risk or the portfolio containing the vendor).\n\nExample vendor.user@upguard.com",
          "type": "string"
        }
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "property": {
          "description": "The name of the property",
          "type": "string"
        },
        "value": {
          "description": "The value of the property",
          "type": "string"
        }
      }
    },
    "QuestionnaireRisk": {
      "type": "object",
      "properties": {
        "controls": {
          "$ref": "#/definitions/StringSlice"
        },
        "createdAt": {
          "description": "The time the risk was first seen",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-20T23:25:26.419947Z"
        },
        "inRemediation": {
          "description": "Flag indicating whether the risk is in remediation",
          "type": "boolean",
          "example": false
        },
        "questionnaireId": {
          "description": "The ID of the questionnaire this risk belongs to",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "riskCategory": {
          "description": "The category of the risk",
          "type": "string",
          "example": "secprog"
        },
        "riskExplanation": {
          "type": "string"
        },
        "riskId": {
          "description": "THe ID of the risk",
          "type": "string",
          "example": "warn_secprog_nopolicies"
        },
        "riskName": {
          "description": "The name of the risk",
          "type": "string",
          "example": "Inadequate security policies"
        },
        "riskSeverity": {
          "description": "The severity of the risk",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ],
          "example": "low"
        },
        "riskText": {
          "description": "The description of the risk",
          "type": "string",
          "example": "Security policies are an important tool for establishing authoritative security requirements and enforcing them throughout the company. Policies form the basis of any security program."
        },
        "riskWaivers": {
          "description": "List of risk waivers associated with the risk",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionnaireRiskWaiver"
          }
        },
        "riskWhy": {
          "type": "string"
        },
        "vendorId": {
          "description": "The ID of the vendor this risk belongs to",
          "type": "integer",
          "format": "int64",
          "example": 123456789
        }
      }
    },
    "QuestionnaireRiskV2": {
      "type": "object",
      "properties": {
        "controls": {
          "$ref": "#/definitions/StringSlice"
        },
        "createdAt": {
          "description": "The time the risk was first seen",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-20T23:25:26.419947Z"
        },
        "inRemediation": {
          "description": "Flag indicating whether the risk is in remediation",
          "type": "boolean",
          "example": false
        },
        "isSharedQuestionnaire": {
          "description": "Flag indicating whether the risk arise from a shared questionnaire. This field will be present",
          "type": "boolean",
          "example": true
        },
        "questionnaireId": {
          "description": "The ID of the questionnaire this risk belongs to",
          "type": "integer",
          "format": "int64",
          "example": 4
        },
        "riskCategory": {
          "description": "The category of the risk",
          "type": "string",
          "example": "secprog"
        },
        "riskExplanation": {
          "type": "string"
        },
        "riskId": {
          "description": "THe ID of the risk",
          "type": "string",
          "example": "warn_secprog_nopolicies"
        },
        "riskName": {
          "description": "The name of the risk",
          "type": "string",
          "example": "Inadequate security policies"
        },
        "riskSeverity": {
          "description": "The severity of the risk",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ],
          "example": "low"
        },
        "riskText": {
          "description": "The description of the risk",
          "type": "string",
          "example": "Security policies are an important tool for establishing authoritative security requirements and enforcing them throughout the company. Policies form the basis of any security program."
        },
        "riskWaivers": {
          "description": "List of risk waivers associated with the risk",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionnaireRiskWaiver"
          }
        },
        "riskWhy": {
          "type": "string"
        },
        "vendorId": {
          "description": "The ID of the vendor this risk belongs to",
          "type": "integer",
          "format": "int64",
          "example": 123456789
        }
      }
    },
    "QuestionnaireRiskWaiver": {
      "type": "object",
      "properties": {
        "active_at": {
          "type": "string",
          "format": "date-time"
        },
        "approved_by": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time"
        },
        "justification": {
          "type": "string"
        }
      }
    },
    "QuestionnaireRisksResponsePayloadBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string",
          "example": "4"
        },
        "risks": {
          "description": "The list of questionnaire risks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionnaireRisk"
          }
        },
        "total_results": {
          "description": "The total number of risks found.",
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "QuestionnaireRisksResponsePayloadBodyV2": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string",
          "example": "4"
        },
        "risks": {
          "description": "The list of questionnaire risks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionnaireRiskV2"
          }
        },
        "total_results": {
          "description": "The total number of risks found.",
          "type": "integer",
          "format": "int64",
          "example": 10
        }
      }
    },
    "QueueReportResponsePayloadBody": {
      "type": "object",
      "properties": {
        "queued_report_id": {
          "description": "The ID of the queued report. Use this when polling the /reports/status endpoint for a download URL.",
          "type": "string"
        }
      }
    },
    "ReportStatusResponsePayloadBody": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "download_url": {
          "description": "URL to download the completed report. Only included if status is \"completed\"",
          "type": "string"
        },
        "download_url_expires": {
          "description": "Expiration timestamp for the download URL. Only included if status is \"completed\"",
          "type": "string"
        },
        "status": {
          "description": "Report status",
          "type": "string",
          "enum": [
            "completed",
            "pending",
            "failed"
          ]
        }
      }
    },
    "Risk": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The risk category identifier",
          "type": "string",
          "example": "dns"
        },
        "description": {
          "description": "Description or context surrounding the risk",
          "type": "string",
          "example": "Domains must be renewed within specified intervals to maintain ownership of the name. The minimum interval is 1 year and the maximum interval is 10 years. If a domain is not renewed within the appropriate interval, the domain name becomes “expired.” There is a 30 day grace period where the domain owner can still renew the expired domain name. After that, the domain can be purchased by a third party"
        },
        "finding": {
          "description": "A short description of the finding",
          "type": "string",
          "example": "Domain expired"
        },
        "firstDetected": {
          "description": "When the risk was first detected",
          "type": "string",
          "format": "date-time",
          "example": "\"2019-10-12T07:20:50.52Z\""
        },
        "hostnameCount": {
          "description": "The number of hostnames where the risk was detected",
          "type": "integer",
          "format": "int64",
          "example": 2
        },
        "hostnameMeta": {
          "description": "Map of meta for each hostname, only included if 'include_meta' param is true and there is meta available for the risk",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "example.com": "'SMTP': [listening on port 25]"
          }
        },
        "hostnames": {
          "description": "The hostnames where the risk was detected, only included if 'exclude_hostnames' param is false",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "example.com",
            "subdomain.example.com"
          ]
        },
        "id": {
          "description": "The risk identifier",
          "type": "string",
          "example": "domain_expired"
        },
        "remediation": {
          "description": "Remediation recommendation",
          "type": "string",
          "example": "The domain should be renewed as soon as possible with the registrar. Domains can be configured with auto-renewal to ensure that they are renewed before the expiration date"
        },
        "risk": {
          "description": "Detailed description of the risk",
          "type": "string",
          "example": "This domain is expired. An expired domain is no longer functional. Any services relying on the expired domain will become unavailable. In addition to the loss of functionality, expired domains can be snapped up quickly by third parties and used to drive traffic to malicious and fraudulent websites"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "risk_waivers": {
          "description": "List of risk waivers applicable to this risk",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskWaiver"
          }
        },
        "severity": {
          "description": "The risk severity",
          "type": "string",
          "example": "high"
        }
      }
    },
    "RiskCounts": {
      "description": "The count of risks for this vendor, broken down by severity",
      "type": "object",
      "properties": {
        "critical": {
          "type": "integer",
          "format": "int64"
        },
        "high": {
          "type": "integer",
          "format": "int64"
        },
        "low": {
          "type": "integer",
          "format": "int64"
        },
        "medium": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RiskDiff": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the risk group",
          "type": "string",
          "enum": [
            "website_sec",
            "email_sec",
            "network_sec",
            "ip_domain_reputation",
            "brand_protect",
            "attack_surface",
            "dns",
            "vulnerability_management",
            "data_leakage",
            "encryption",
            "questionnaire_risks",
            "vulns",
            "typosquatting",
            "emailexposures",
            "dataleaks",
            "additional_evidence"
          ]
        },
        "description": {
          "description": "Description or context surrounding the risk",
          "type": "string",
          "example": "Domains must be renewed within specified intervals to maintain ownership of the name. The minimum interval is 1 year and the maximum interval is 10 years. If a domain is not renewed within the appropriate interval, the domain name becomes “expired.” There is a 30 day grace period where the domain owner can still renew the expired domain name. After that, the domain can be purchased by a third party"
        },
        "group": {
          "description": "The ID of the risk class",
          "type": "string",
          "example": "domain"
        },
        "id": {
          "description": "The ID of risk",
          "type": "string",
          "example": "domain_expired"
        },
        "name": {
          "description": "The name of the risk",
          "type": "string",
          "example": "Domain Expired"
        },
        "remediation": {
          "description": "Remediation recommendation",
          "type": "string",
          "example": "The domain should be renewed as soon as possible with the registrar. Domains can be configured with auto-renewal to ensure that they are renewed before the expiration date"
        },
        "riskDetails": {
          "description": "Detailed description of the risk",
          "type": "string",
          "example": "This domain is expired. An expired domain is no longer functional. Any services relying on the expired domain will become unavailable. In addition to the loss of functionality, expired domains can be snapped up quickly by third parties and used to drive traffic to malicious and fraudulent websites"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "scanDiffs": {
          "description": "The differences between our automated scans",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanDiff"
          }
        },
        "severity": {
          "description": "The severity of the risk",
          "type": "integer",
          "format": "int64",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "severityName": {
          "description": "The severity of the risks in human-readable form",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "vendorDiff": {
          "$ref": "#/definitions/VendorDiff"
        }
      }
    },
    "RiskDiffGroup": {
      "type": "object",
      "properties": {
        "groupID": {
          "description": "The ID of the risk group",
          "type": "string"
        },
        "highestSeverity": {
          "description": "The highest severity of the risks in this group",
          "type": "integer",
          "format": "int64",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ]
        },
        "highestSeverityName": {
          "description": "The highest severity of the risks in this group in human-readable form",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "name": {
          "description": "The name of the risk group",
          "type": "string"
        },
        "risks": {
          "description": "The list of risks in this group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskDiff"
          }
        }
      }
    },
    "RiskWaiver": {
      "type": "object",
      "properties": {
        "active_at": {
          "description": "Time the risk waiver was activated (RFC 3339 format)",
          "type": "string",
          "format": "date-time",
          "example": "\"2019-10-12T07:20:50.52Z\""
        },
        "all_hostnames": {
          "description": "Flag indicating whether the risk has been waived for all hostnames",
          "type": "boolean",
          "example": false
        },
        "approved_by": {
          "description": "Email address of the user who approved the risk waiver. This field will be omitted if not applicable, e.g. self approved risk waivers.",
          "type": "string",
          "example": "\"john@example.com\""
        },
        "created_by": {
          "description": "Email address of the user who created the risk waiver",
          "type": "string",
          "example": "\"john@example.com\""
        },
        "expires_at": {
          "description": "Time the risk waiver will expire (RFC 3339 format). If the risk waiver is set not to expire this field will be omitted.",
          "type": "string",
          "format": "date-time",
          "example": "\"2019-10-12T07:20:50.52Z\""
        },
        "hostnames": {
          "description": "The list of hostnames the risk has been waived for. The field will be omitted if all_hostnames is true.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "example.com",
            "subdomain.example.com"
          ]
        },
        "justification": {
          "description": "Justification for the risk waiver. If not available this field will be omitted.",
          "type": "string",
          "example": "\"Loren Ipsum\""
        }
      }
    },
    "RisksDiffResponsePayloadBody": {
      "type": "object",
      "properties": {
        "risksIntroduced": {
          "description": "The risks introduced between start date and end date grouped by class",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummaryDiffGroup"
          }
        },
        "risksResolved": {
          "description": "The risks resolved between start date and end date grouped by class",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummaryDiffGroup"
          }
        }
      }
    },
    "ScanDiff": {
      "type": "object",
      "properties": {
        "expected": {
          "description": "The expected status",
          "type": "string"
        },
        "hostname": {
          "description": "The domain name or IP address experiencing the risk diff",
          "type": "string"
        },
        "property": {
          "description": "The property checked",
          "type": "string"
        },
        "scanA": {
          "$ref": "#/definitions/ScanResult"
        },
        "scanB": {
          "$ref": "#/definitions/ScanResult"
        }
      }
    },
    "ScanResult": {
      "type": "object",
      "properties": {
        "date": {
          "description": "The date of the scan (RFC 3339 format)",
          "type": "string",
          "format": "date-time"
        },
        "metaValue": {
          "description": "Metadata for the result of the check",
          "type": "string"
        },
        "status": {
          "description": "The check status after the automated scan",
          "type": "string",
          "enum": [
            "PASS",
            "FAIL",
            "UNKNOWN",
            "WAIVED"
          ]
        }
      }
    },
    "ScoreByEpoch": {
      "type": "object",
      "properties": {
        "attack_surface": {
          "type": "integer",
          "format": "int64"
        },
        "brand_protection": {
          "description": "DEPRECATED: Use brand_reputation",
          "type": "integer",
          "format": "int64"
        },
        "brand_reputation": {
          "type": "integer",
          "format": "int64"
        },
        "data_leakage": {
          "type": "integer",
          "format": "int64"
        },
        "dns": {
          "type": "integer",
          "format": "int64"
        },
        "email_security": {
          "type": "integer",
          "format": "int64"
        },
        "encryption": {
          "type": "integer",
          "format": "int64"
        },
        "epoch": {
          "description": "The name of the epoch the scores are for",
          "type": "string",
          "enum": [
            "now",
            "1 month ago",
            "3 months ago",
            "1 year ago"
          ]
        },
        "ip_domain_reputation": {
          "type": "integer",
          "format": "int64"
        },
        "network_security": {
          "type": "integer",
          "format": "int64"
        },
        "overall": {
          "type": "integer",
          "format": "int64"
        },
        "phishing": {
          "description": "DEPRECATED: Use ip_domain_reputation",
          "type": "integer",
          "format": "int64"
        },
        "questionnaires": {
          "type": "integer",
          "format": "int64"
        },
        "vulnerability_management": {
          "type": "integer",
          "format": "int64"
        },
        "website_security": {
          "type": "integer",
          "format": "int64"
        },
        "when": {
          "description": "The date of this epoch",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Severity": {
      "type": "integer",
      "format": "int64"
    },
    "StringSlice": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "SummaryDiff": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the risk group",
          "type": "string",
          "enum": [
            "website_sec",
            "email_sec",
            "network_sec",
            "ip_domain_reputation",
            "brand_protect",
            "attack_surface",
            "dns",
            "vulnerability_management",
            "data_leakage",
            "encryption",
            "questionnaire_risks",
            "vulns",
            "typosquatting",
            "emailexposures",
            "dataleaks",
            "additional_evidence"
          ]
        },
        "cloudscanDiffs": {
          "$ref": "#/definitions/Diffs"
        },
        "description": {
          "description": "Description or context surrounding the risk",
          "type": "string",
          "example": "Domains must be renewed within specified intervals to maintain ownership of the name. The minimum interval is 1 year and the maximum interval is 10 years. If a domain is not renewed within the appropriate interval, the domain name becomes “expired.” There is a 30 day grace period where the domain owner can still renew the expired domain name. After that, the domain can be purchased by a third party"
        },
        "group": {
          "description": "The ID of the risk class",
          "type": "string"
        },
        "id": {
          "description": "The ID of risk",
          "type": "string"
        },
        "name": {
          "description": "The name of the risk",
          "type": "string",
          "example": "Domain expired"
        },
        "remediation": {
          "description": "Remediation recommendation",
          "type": "string",
          "example": "The domain should be renewed as soon as possible with the registrar. Domains can be configured with auto-renewal to ensure that they are renewed before the expiration date"
        },
        "riskDetails": {
          "description": "Detailed description of the risk",
          "type": "string",
          "example": "This domain is expired. An expired domain is no longer functional. Any services relying on the expired domain will become unavailable. In addition to the loss of functionality, expired domains can be snapped up quickly by third parties and used to drive traffic to malicious and fraudulent websites"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "severity": {
          "$ref": "#/definitions/Severity"
        },
        "severityName": {
          "description": "The severity of the risks in human-readable form",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "vendorDiff": {
          "$ref": "#/definitions/VendorDiff"
        }
      }
    },
    "SummaryDiffGroup": {
      "type": "object",
      "properties": {
        "diffs": {
          "description": "The list of risk diffs in this group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SummaryDiff"
          }
        },
        "groupID": {
          "description": "The ID of the risk group",
          "type": "string"
        },
        "highestSeverity": {
          "$ref": "#/definitions/Severity"
        },
        "highestSeverityName": {
          "description": "The highest severity of the risks in this group in human-readable form",
          "type": "string",
          "enum": [
            "pass",
            "info",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "name": {
          "description": "The name of the risk group",
          "type": "string"
        }
      }
    },
    "TyposquatDNSBlocklist": {
      "type": "object",
      "properties": {
        "activity": {
          "description": "The suspected malicious activity associated with the DNS blocklist",
          "type": "string"
        },
        "name": {
          "description": "The name of the DNS blocklist",
          "type": "string"
        }
      }
    },
    "TyposquatDomain": {
      "type": "object",
      "properties": {
        "added_at": {
          "description": "The date the domain was added to typosquatting in RFC3339 format.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05.999999Z"
        },
        "domain": {
          "description": "The typosquat domain",
          "type": "string"
        },
        "last_scanned_at": {
          "description": "The date of last scan for this domain in RFC3339 format. Absent if the domain has never been scanned.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05.999999Z"
        },
        "num_registered": {
          "description": "The number of registered permutations for this domain",
          "type": "integer",
          "format": "int64"
        },
        "num_unregistered": {
          "description": "The number of unregistered permutations for this domain",
          "type": "integer",
          "format": "int64"
        },
        "primary_domain": {
          "description": "Flag indicating whether the domain is the primary domain for the account",
          "type": "boolean"
        }
      }
    },
    "TyposquatHostnameDNSBlocklists": {
      "type": "object",
      "properties": {
        "dns_blocklists": {
          "description": "The list of DNS blocklists the hostname was found on",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatDNSBlocklist"
          }
        },
        "hostname": {
          "description": "The hostname associated with the permutation",
          "type": "string"
        }
      }
    },
    "TyposquatPermutationDetail": {
      "type": "object",
      "properties": {
        "a_records": {
          "description": "The list of A records associated with the permutation. If no A records are associated with the permutation this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country": {
          "description": "The country where the permutation is registered. If missing the field will be omitted.",
          "type": "string"
        },
        "date_detected": {
          "description": "The date the registered permutation was detected in RFC3339 format. If missing this field will be omitted.",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05.999999Z"
        },
        "hostname": {
          "description": "The hostname of the permutation",
          "type": "string"
        },
        "hostname_dns_blocklists": {
          "description": "The list of associated hostnames found on DNS blocklists and the blocklists they were found on. If no DNS blocklists are associated with the permutation this field will be omitted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TyposquatHostnameDNSBlocklists"
          }
        },
        "mx_records": {
          "description": "The list of MX records associated with the permutation. If no MX records are associated with the permutation this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ns_records": {
          "description": "The list of NS records associated with the permutation. If no NS records are associated with the permutation this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permutation_type": {
          "$ref": "#/definitions/PermutationType"
        }
      }
    },
    "UpdateVendorAttributesV1RequestBody": {
      "type": "object",
      "required": [
        "vendor_primary_hostname"
      ],
      "properties": {
        "attributes": {
          "description": "The attributes to assign to the vendor. If you want to reset an attribute pass null as value.\nFor multi select attributes use a comma separated list of values. If any of the values contains\na comma you can escape it with \\,",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "business owner": "John Smith",
            "contract end date": null,
            "cost centre": "1234"
          }
        },
        "vendor_primary_hostname": {
          "description": "The primary hostname of the vendor to update attribute for.",
          "type": "string"
        }
      }
    },
    "VendorDiff": {
      "type": "object",
      "properties": {
        "expected": {
          "description": "The expected status",
          "type": "string"
        },
        "metaValueA": {
          "description": "Metadata for the result of the first check",
          "type": "string"
        },
        "metaValueB": {
          "description": "Metadata for the result of the second check",
          "type": "string"
        },
        "prevProvisionalID": {
          "description": "Previous provisional ID if the last scan contained it",
          "type": "string"
        },
        "statusA": {
          "$ref": "#/definitions/DiffStatus"
        },
        "statusB": {
          "$ref": "#/definitions/DiffStatus"
        }
      }
    },
    "VendorMetadata": {
      "description": "Various pieces of metadata for the vendor",
      "type": "object",
      "properties": {
        "annual_revenue": {
          "type": "integer",
          "format": "int64"
        },
        "employee_count": {
          "type": "integer",
          "format": "int64"
        },
        "legal_name": {
          "type": "string"
        },
        "location_city": {
          "type": "string"
        },
        "location_country": {
          "type": "string"
        },
        "location_postcode": {
          "type": "string"
        },
        "market_cap": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "VendorQuestionnaireAttachment": {
      "description": "A vendor questionnaire attachment",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the attachment.",
          "type": "string"
        },
        "file_name": {
          "description": "The filename of the questionnaire attachment.",
          "type": "string"
        },
        "id": {
          "description": "The id of the attachment.",
          "type": "integer",
          "format": "int64"
        },
        "uploaded_at": {
          "description": "The datetime that the questionnaire attachment was uploaded by the vendor",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "VendorsResponsePayloadBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of vendors found.",
          "type": "integer",
          "format": "int64"
        },
        "vendors": {
          "description": "The list of vendors found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoredVendor"
          }
        }
      }
    },
    "VendorsRisk": {
      "type": "object",
      "properties": {
        "category": {
          "description": "The risk category identifier",
          "type": "string",
          "example": "vulnerability_management"
        },
        "description": {
          "description": "Description of the risk",
          "type": "string",
          "example": "Remote code execution exploit chain consisting of 3 vulnerabilities in Microsoft Exchange Server: CVE-2021-34473, CVE-2021-34523 and CVE-2021-31207"
        },
        "finding": {
          "description": "A short description of the finding",
          "type": "string",
          "example": "Vulnerable to CVE-2021-34473 (ProxyShell)"
        },
        "id": {
          "description": "The risk identifier",
          "type": "string",
          "example": "verified_vuln:CVE-2021-34473"
        },
        "riskSubtype": {
          "description": "The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.",
          "type": "string",
          "example": "CVE-2021-34473"
        },
        "riskType": {
          "description": "The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln",
          "type": "string",
          "example": "verified_vuln"
        },
        "severity": {
          "description": "The risk severity",
          "type": "string",
          "example": "high"
        }
      }
    },
    "VendorsRiskDiffs": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the vendor.\nIts possible for a hostname to change which vendor it belongs to for a number of reasons (eg. Company's legal entity changes, improved data quality, etc...).\nFor this reason, do not assume a hostname will always return the same vendor id.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the vendor",
          "type": "string"
        },
        "primary_hostname": {
          "description": "The primary hostname of the vendor",
          "type": "string"
        },
        "risksIntroduced": {
          "description": "The risks introduced between start date and end date grouped by class, including previously provisional risks",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskDiffGroup"
          }
        },
        "risksResolved": {
          "description": "The risks resolved between start date and end date grouped by class",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RiskDiffGroup"
          }
        }
      }
    },
    "VendorsRisksDiffResponsePayloadBody": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "description": "The token to be used to retrieve the next page of results.\nWill not be returned if there are no more results.",
          "type": "string"
        },
        "total_results": {
          "description": "The total number of vendors found.",
          "type": "integer",
          "format": "int64"
        },
        "vendors": {
          "description": "The list of vendors found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorsRiskDiffs"
          }
        }
      }
    },
    "Vulnerability": {
      "type": "object",
      "properties": {
        "cpes": {
          "description": "The CPEs (Common Platform Enumeration) of the vulnerability",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "cpe:/a:wordpress:wordpress:4.9.6"
          ]
        },
        "created_at": {
          "description": "The date the potential vulnerability was detected (ISO 3339 format)",
          "type": "string",
          "format": "date-time",
          "example": "2019-07-11T23:43:35.141491Z"
        },
        "cve": {
          "$ref": "#/definitions/cve"
        },
        "hostname": {
          "description": "The hostname where the potential vulnerability was detected",
          "type": "string",
          "example": "subdomain.example.com"
        },
        "ip_addresses": {
          "description": "The IP addresses where the potential vulnerability was detected",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "1.2.3.4",
            "5.6.7.8"
          ]
        },
        "verified": {
          "description": "Indicates if the vulnerability has been tested and verified as part of an automated scan",
          "type": "boolean"
        }
      }
    },
    "Webhook": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Flag indicating whether the webhook is enabled or disabled",
          "type": "boolean",
          "example": true
        },
        "id": {
          "description": "The ID of the webhook",
          "type": "string",
          "example": "ABCD1234"
        },
        "name": {
          "description": "The name of the webhook",
          "type": "string",
          "example": "webhook"
        },
        "notification_type_ids": {
          "description": "The list of notifications IDs registered for this webhook",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "10-0000-0000-0000000000000000"
          ]
        },
        "url": {
          "description": "The URL used by the webhook to send notifications to",
          "type": "string",
          "example": "https://example.com/"
        },
        "webhook_type": {
          "description": "The type of webhook",
          "type": "string",
          "enum": [
            "zapier",
            "webhook"
          ],
          "example": "zapier"
        }
      }
    },
    "WebhookSampleData": {
      "type": "object",
      "properties": {
        "context": {
          "description": "Extra metadata available for the notifications",
          "type": "object",
          "additionalProperties": {}
        },
        "description": {
          "description": "Description of the notifications",
          "type": "string",
          "example": "Jane Doe replied to a message by John Smith on questionnaire 'SOC2'"
        },
        "occurredAt": {
          "description": "Timestamp for the event occurrence",
          "type": "string",
          "format": "date-time",
          "example": "2021-08-17T23:04:02Z"
        },
        "type": {
          "description": "Human readable type of notification",
          "type": "string",
          "example": "QuestionnaireCorrespondence"
        }
      }
    },
    "additional_evidences_list": {
      "description": "A vendor additional evidences list",
      "type": "object",
      "properties": {
        "commentary": {
          "description": "The commentary supplied to describe the context and relevance of the evidence",
          "type": "string"
        },
        "document_type": {
          "description": "The evidence document type",
          "type": "string"
        },
        "file_name": {
          "description": "The file name of the latest uploaded document (version) for this evidence",
          "type": "string"
        },
        "id": {
          "description": "The additional evidence ID.",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name given to the additional evidence",
          "type": "string"
        },
        "uploaded_at": {
          "description": "When the latest document for this evidence was uploaded.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "cve": {
      "description": "Information about a CVE (Common Vulnerabilities and Exposures) Entry",
      "type": "object",
      "properties": {
        "description": {
          "description": "The technical description for the vulnerability",
          "type": "string",
          "example": "An issue was discovered in the EXIF component in PHP before 7.1.27, 7.2.x before 7.2.16, and 7.3.x"
        },
        "epss": {
          "description": "The EPSS (Exploit Prediction Scoring System) score.",
          "type": "number",
          "format": "double",
          "example": 0.75431
        },
        "id": {
          "description": "The CVE ID",
          "type": "string",
          "example": "CVE-2019-9641"
        },
        "severity": {
          "description": "The CVSS (Common Vulnerability Scoring System)",
          "type": "number",
          "format": "double",
          "example": 7.5
        }
      }
    },
    "document": {
      "description": "A vendor document",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the document.",
          "type": "string"
        },
        "file_name": {
          "description": "The file name of the uploaded document.",
          "type": "string"
        },
        "id": {
          "description": "The document ID.",
          "type": "integer",
          "format": "int64"
        },
        "uploaded_at": {
          "description": "When the document was uploaded.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "endpoint300Error": {
      "description": "Multipart error details coming from an endpoint",
      "type": "object",
      "properties": {
        "error": {
          "description": "Error indicates that the request must specify that it accepts multipart/form-data",
          "type": "string"
        }
      }
    },
    "endpointError": {
      "description": "Error details coming from an endpoint",
      "type": "object",
      "properties": {
        "error": {
          "description": "A description of the error",
          "type": "string"
        }
      }
    },
    "monitoredVendor": {
      "description": "A monitored vendor",
      "type": "object",
      "properties": {
        "assessmentStatus": {
          "description": "Assessment status for the vendor. Possible values are Published, In progress, Not assessed. The field will be omitted for non monitored vendors.",
          "type": "string"
        },
        "attributes": {
          "description": "The attributes applied to the vendor. If no attributes are applied this field will be omitted",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "automatedScore": {
          "description": "The current automated score of the vendor without questionnaire. Omitted if no current scanning score.",
          "type": "integer",
          "format": "int64"
        },
        "category_scores": {
          "$ref": "#/definitions/CategoryScores"
        },
        "id": {
          "description": "The id of the vendor.\nIts possible for a hostname to change which vendor it belongs to for a number of reasons (eg. Company's legal entity changes, improved data quality, etc...).\nFor this reason, do not assume a hostname will always return the same vendor id.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Labels that the vendor is currently associated with.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastAssessed": {
          "description": "Date of the last assessment for the vendor. The field will be omitted if no published assessment is present.",
          "type": "string",
          "format": "date-time"
        },
        "monitored": {
          "description": "Indicates whether the vendor is monitored or not.",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the vendor",
          "type": "string"
        },
        "overallScore": {
          "description": "The current score of the vendor including automated and questionnaire. Omitted if no current overall score.",
          "type": "integer",
          "format": "int64"
        },
        "primary_hostname": {
          "description": "The primary hostname of the vendor",
          "type": "string"
        },
        "questionnaireScore": {
          "description": "The current questionnaire score of the vendor. Omitted if no current questionnaire score.",
          "type": "integer",
          "format": "int64"
        },
        "risks": {
          "description": "Optional list of risks for the vendor. Note that this is a summary list of risks and does not take into account risk waivers.\nTo have a precise view of a vendor risks use the /risks/vendors endpoint.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VendorsRisk"
          }
        },
        "score": {
          "description": "NOTE: deprecated (use OverallScore). The current score of the vendor. A -1 value represents no current score for the vendor.",
          "type": "integer",
          "format": "int64"
        },
        "tier": {
          "description": "Tier currently assigned to the vendor. Omitted if no tier is assigned to the vendor.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "questionnaire": {
      "type": "object",
      "properties": {
        "archived": {
          "description": "Flag indicating whether the questionnaire has been archived",
          "type": "boolean",
          "example": true
        },
        "id": {
          "description": "The id of the questionnaire.",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "in_remediation": {
          "description": "Flag indicating whether there are risks under remediation in this questionnaire",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "The name of the questionnaire.",
          "type": "string",
          "example": "iso27001"
        },
        "returned_at": {
          "description": "The datetime that the questionnaire was returned by the vendor.\nThis field will be null if the questionnaire has not been returned.",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-20T23:23:37.228539Z"
        },
        "sent_at": {
          "description": "The datetime that the questionnaire was sent.",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-20T21:42:53.821938Z"
        },
        "status": {
          "description": "The current status of the questionnaire.",
          "type": "string",
          "enum": [
            "sent",
            "opened",
            "returned",
            "inreview",
            "complete",
            "cancelled",
            "published"
          ],
          "example": "complete"
        }
      }
    },
    "questionnaireRecipient": {
      "description": "Model for a questionnaire recipient",
      "type": "object",
      "required": [
        "recipient_email"
      ],
      "properties": {
        "recipient_email": {
          "description": "The email address of the questionnaire recipient (will be invited to the platform if not already a member).",
          "type": "string",
          "example": "security@upguard.com"
        },
        "recipient_first_name": {
          "description": "The first name of the questionnaire recipient (used for new recipients only).",
          "type": "string",
          "example": "John"
        },
        "recipient_last_name": {
          "description": "The last name of the questionnaire recipient (used for new recipients only).",
          "type": "string",
          "example": "Smith"
        },
        "recipient_title": {
          "description": "The title of the questionnaire recipient (used for new recipients only).",
          "type": "string",
          "example": "CSO"
        }
      }
    },
    "questionnaireSent": {
      "description": "Questionnaire ID",
      "type": "object",
      "properties": {
        "questionnaire_id": {
          "description": "The id of the questionnaire that was sent",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "questionnaireType": {
      "description": "Questionnaire Type",
      "type": "object",
      "properties": {
        "questionnaire_type_id": {
          "description": "The id of the questionnaire type",
          "type": "integer",
          "format": "int64"
        },
        "questionnaire_type_name": {
          "description": "The name of the questionnaire type",
          "type": "string"
        }
      }
    },
    "relationship_questionnaire_sent": {
      "description": "Relationship Questionnaire ID",
      "type": "object",
      "properties": {
        "questionnaire_id": {
          "description": "The id of the questionnaire that was sent",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "shared_questionnaire": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the questionnaire.",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "in_remediation": {
          "description": "Flag indicating whether there are risks under remediation in this questionnaire",
          "type": "boolean",
          "example": false
        },
        "included_in_risk_profile": {
          "description": "Flag indicating whether the questionnaire is included in the risk profile and vendor scoring",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "The name of the questionnaire.",
          "type": "string",
          "example": "iso27001"
        },
        "published_at": {
          "description": "The datetime that the questionnaire was published.",
          "type": "string",
          "format": "date-time",
          "example": "2022-03-20T21:42:53.821938Z"
        }
      }
    },
    "vendor": {
      "description": "A vendor",
      "type": "object",
      "properties": {
        "assessment_status": {
          "description": "Assessment status for the vendor. Possible values are Published, In progress, Not assessed. The field will be omitted for non monitored vendors.",
          "type": "string"
        },
        "attributes": {
          "description": "The attributes applied to the vendor. If no attributes are applied this field will be omitted",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "automatedScore": {
          "description": "The automated score of the vendor without questionnaire. Omitted if no current scanning score.",
          "type": "integer",
          "format": "int64"
        },
        "categoryScores": {
          "$ref": "#/definitions/CategoryScores"
        },
        "category_risk_counts": {
          "$ref": "#/definitions/CategoryRiskCounts"
        },
        "domain_count_active": {
          "description": "The total number of active domains for this vendor.",
          "type": "integer",
          "format": "int64"
        },
        "domain_count_inactive": {
          "description": "The total number of inactive domains for this vendor.",
          "type": "integer",
          "format": "int64"
        },
        "domain_count_total": {
          "description": "The total number of domains for this vendor.",
          "type": "integer",
          "format": "int64"
        },
        "first_monitored": {
          "description": "The date that this vendor was monitored by your organization.",
          "type": "string"
        },
        "id": {
          "description": "The id of the vendor.\nIts possible for a hostname to change which vendor it belongs to for a number of reasons (eg. Company's legal entity changes, improved data quality, etc...).\nFor this reason, do not assume a hostname will always return the same vendor id.",
          "type": "integer",
          "format": "int64"
        },
        "industry_average_score": {
          "description": "The average overall score for the industry this vendor falls into.",
          "type": "integer",
          "format": "int64"
        },
        "industry_group": {
          "description": "The industry group this vendor falls into.",
          "type": "string"
        },
        "industry_sector": {
          "description": "The industry sector this vendor falls into.\nIndustry sectors contain multiple industry groups.",
          "type": "string"
        },
        "labels": {
          "description": "The labels applied to the vendor. If no labels are present this field will be omitted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_assessed": {
          "description": "Date of the last assessment for the vendor. The field will be omitted if no published assessment is present.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "The name of the vendor",
          "type": "string"
        },
        "note": {
          "description": "The note applied to the vendor. If no note is applied this field will be omitted",
          "type": "string"
        },
        "overallScore": {
          "description": "The current score of the vendor including automated and questionnaire. Omitted if no current overall score.",
          "type": "integer",
          "format": "int64"
        },
        "overall_risk_counts": {
          "$ref": "#/definitions/RiskCounts"
        },
        "portfolios": {
          "description": "The portfolios applied to the vendor. If no portfolios are applied this field will be omitted",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "primary_hostname": {
          "description": "The primary hostname of the vendor",
          "type": "string"
        },
        "questionnaireScore": {
          "description": "The current questionnaire score of the vendor. Omitted if no current questionnaire score.",
          "type": "integer",
          "format": "int64"
        },
        "reassessment_date": {
          "description": "Optional date of the next scheduled assessment for the vendor.",
          "type": "string",
          "format": "date-time"
        },
        "score": {
          "description": "NOTE: deprecated (use AutomatedScore). The current automated score of the vendor. A -1 value represents no current score for the vendor.",
          "type": "integer",
          "format": "int64"
        },
        "scores_by_epoch": {
          "description": "Overall scores and category scores by epoch.\nBroken down into now, 1 month ago, 3 months ago, and 1 year ago.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScoreByEpoch"
          }
        },
        "tier": {
          "description": "The tier applied to the vendor. If no tier is applied to the vendor this field will be omitted",
          "type": "integer",
          "format": "int64"
        },
        "vendor_metadata": {
          "$ref": "#/definitions/VendorMetadata"
        }
      }
    }
  },
  "responses": {
    "apiKeyInsufficientPermissions403Error": {
      "description": "Your API key does not have permission to perform this action.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "createWebhookV1Response": {
      "description": "Information about the created webhook",
      "schema": {
        "$ref": "#/definitions/CreateWebhookResponsePayload"
      }
    },
    "customReportsListV1Response": {
      "description": "List of custom report definitions",
      "schema": {
        "$ref": "#/definitions/CustomReportsListResponsePayloadBody"
      }
    },
    "deleteWebhookV1Response": {
      "description": "Empty response",
      "schema": {
        "$ref": "#/definitions/DeleteWebhookResponsePayload"
      }
    },
    "deregisterBulkHostnamesSuccessful": {
      "description": "Returns the number of deregistered hostnames as well as the number of remaining slots.",
      "schema": {
        "$ref": "#/definitions/BulkDeregisterHostnamesV1ResponseBody"
      }
    },
    "exampleDataWebhookV1Response": {
      "description": "List of example data",
      "schema": {
        "$ref": "#/definitions/ExampleDataWebhookResponsePayload"
      }
    },
    "forbiddenError": {
      "description": "Account does not have access to requested entities",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "getAvailableRisksResponse": {
      "description": "Available risks",
      "schema": {
        "$ref": "#/definitions/AvailableRisk"
      }
    },
    "getAvailableRisksV2Response": {
      "description": "Available risks",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/AvailableRiskV2"
        }
      }
    },
    "getBreachedIdentitiesResponse": {
      "description": "A list of breached identities",
      "schema": {
        "$ref": "#/definitions/BreachedIdentitiesResponsePayloadBody"
      }
    },
    "getBulkHostnameDetailsSuccessful": {
      "description": "Returns the details of the hostname.",
      "schema": {
        "$ref": "#/definitions/BulkHostname"
      }
    },
    "getBulkHostnamesStatsSuccessful": {
      "description": "Returns the statistics for the registered hostnames.",
      "schema": {
        "$ref": "#/definitions/BulkGetHostnamesStatsV1ResponseBody"
      }
    },
    "getDataLeaksDisclosuresResponse": {
      "description": "Data Leaks disclosed",
      "schema": {
        "$ref": "#/definitions/DataLeaksDisclosuresResponsePayloadBody"
      }
    },
    "getDomainDetailsResponse": {
      "description": "Domain details",
      "schema": {
        "$ref": "#/definitions/GetDomainDetailsV1RespBody"
      }
    },
    "getDomainsResponse": {
      "description": "A list of domains",
      "schema": {
        "$ref": "#/definitions/GetDomainsV1RespBody"
      }
    },
    "getIPsResponse": {
      "description": "A list of ips",
      "schema": {
        "$ref": "#/definitions/GetIPsV1RespBody"
      }
    },
    "getIdentityBreachResponse": {
      "description": "Details of an identity breach",
      "schema": {
        "$ref": "#/definitions/IdentityBreachResponsePayloadBody"
      }
    },
    "getIpDetailsResponse": {
      "description": "IP details",
      "schema": {
        "$ref": "#/definitions/GetIpDetailsV1RespBody"
      }
    },
    "getLabelsResponse": {
      "description": "A list of labels",
      "schema": {
        "$ref": "#/definitions/GetLabelsV1RespBody"
      }
    },
    "getNotificationsV1Response": {
      "description": "List of notifications",
      "schema": {
        "$ref": "#/definitions/GetNotificationsV1ResponsePayloadBody"
      }
    },
    "getOrgVulnerabilitiesResponse": {
      "description": "A list of detected potential vulnerabilities for your domains & IPs",
      "schema": {
        "$ref": "#/definitions/GetOrgVulnerabilitiesV1RespBody"
      }
    },
    "getOrganisationV1": {
      "description": "Information about the current organisation",
      "schema": {
        "$ref": "#/definitions/GetOrganisationV1RespBody"
      }
    },
    "getQuestionnaireTypesResponse": {
      "description": "The questionnaire types available",
      "schema": {
        "$ref": "#/definitions/questionnaireType"
      }
    },
    "getRangesResponse": {
      "description": "A list of ranges",
      "schema": {
        "$ref": "#/definitions/GetRangesV1RespBody"
      }
    },
    "getRiskDetailResponse": {
      "description": "Risk details",
      "schema": {
        "$ref": "#/definitions/AvailableRiskV2"
      }
    },
    "getRisksDiffResponse": {
      "description": "Risks introduced and resolved",
      "schema": {
        "$ref": "#/definitions/RisksDiffResponsePayloadBody"
      }
    },
    "getRisksResponse": {
      "description": "A list of detected risks",
      "schema": {
        "$ref": "#/definitions/GetRisksV1RespBody"
      }
    },
    "getSubsidiariesResponse": {
      "description": "A hierarchy of subsidiaries",
      "schema": {
        "$ref": "#/definitions/GetSubsidiariesV1RespBody"
      }
    },
    "getTyposquatDetails": {
      "description": "A list of typosquat domains",
      "schema": {
        "$ref": "#/definitions/GetTyposquatDetailsResponsePayloadBody"
      }
    },
    "getTyposquatDetails404Error": {
      "description": "The requested domain is not enabled.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "getTyposquatResponse": {
      "description": "A list of typosquat domains",
      "schema": {
        "$ref": "#/definitions/GetTyposquatResponsePayloadBody"
      }
    },
    "getVendor202Response": {
      "description": "The vendor does not currently exist in the system and has been scheduled for addition"
    },
    "getVendor402Error": {
      "description": "You are not allowed to access the vendor for licensing reasons.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "getVendorAdditionalEvidenceResponse": {
      "description": "Vendors additional evidence",
      "schema": {
        "$ref": "#/definitions/GetVendorAdditionalEvidenceResponsePayload"
      }
    },
    "getVendorAdditionalEvidencesResponse": {
      "description": "Vendor additional evidences list",
      "schema": {
        "$ref": "#/definitions/GetVendorAdditionalEvidencesResponsePayload"
      }
    },
    "getVendorAttachmentResponse": {
      "description": "Vendors attachment",
      "schema": {
        "$ref": "#/definitions/GetVendorAttachmentResponsePayload"
      }
    },
    "getVendorDocumentResponse": {
      "description": "Vendors document",
      "schema": {
        "$ref": "#/definitions/GetVendorDocumentResponsePayload"
      }
    },
    "getVendorDocumentsResponse": {
      "description": "Vendor documents",
      "schema": {
        "$ref": "#/definitions/GetVendorDocumentsResponsePayload"
      }
    },
    "getVendorQuestionnaireAttachmentsResponse": {
      "description": "Vendor questionnaire attachments",
      "schema": {
        "$ref": "#/definitions/GetVendorQuestionnaireAttachmentsResponsePayload"
      }
    },
    "getVendorQuestionnaireRisksResponse": {
      "description": "Questionnaire risks for specific watched vendors or questionnaire instances",
      "schema": {
        "$ref": "#/definitions/QuestionnaireRisksResponsePayloadBody"
      }
    },
    "getVendorQuestionnaireRisksResponseV2": {
      "description": "Questionnaire risks for specific watched vendors or questionnaire instances, including waiver details if appropriate",
      "schema": {
        "$ref": "#/definitions/QuestionnaireRisksResponsePayloadBodyV2"
      }
    },
    "getVendorQuestionnairesV1Response": {
      "description": "List of vendor questionnaires",
      "schema": {
        "$ref": "#/definitions/GetVendorQuestionnairesV1ResponsePayload"
      }
    },
    "getVendorQuestionnairesV2Response": {
      "description": "List of vendor questionnaires",
      "schema": {
        "$ref": "#/definitions/GetVendorQuestionnairesV2ResponsePayload"
      }
    },
    "getVendorResponse": {
      "description": "Vendor details",
      "schema": {
        "$ref": "#/definitions/vendor"
      }
    },
    "getVendorVulnerabilitiesResponse": {
      "description": "A list of detected potential vendor vulnerabilities",
      "schema": {
        "$ref": "#/definitions/GetVendorVulnerabilitiesV1RespBody"
      }
    },
    "getVendorsResponse": {
      "description": "A list of vendors",
      "schema": {
        "$ref": "#/definitions/VendorsResponsePayloadBody"
      }
    },
    "getVendorsRisksDiffResponse": {
      "description": "Risks introduced and resolved",
      "schema": {
        "$ref": "#/definitions/VendorsRisksDiffResponsePayloadBody"
      }
    },
    "getWebhookNotificationTypesV1Response": {
      "description": "List of supported notification types for your organisation",
      "schema": {
        "$ref": "#/definitions/GetWebhookNotificationTypesResponsePayload"
      }
    },
    "internalSystemError": {
      "description": "An internal system error occurred",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "invalidLimitExceedError": {
      "description": "The requested action would exceed the limits of your contract.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "invalidParametersError": {
      "description": "An invalid parameter was supplied or a mandatory parameter was missing",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "listBulkHostnamesSuccessful": {
      "description": "Returns the list of hostnames and their risks.",
      "schema": {
        "$ref": "#/definitions/BulkListHostnamesV1ResponseBody"
      }
    },
    "listWebhooksV1Response": {
      "description": "List of registered webhooks",
      "schema": {
        "$ref": "#/definitions/ListWebhookResponsePayload"
      }
    },
    "monitorVendor202Response": {
      "description": "The vendor does not currently exist in the system and has been scheduled for addition"
    },
    "monitorVendor402Error": {
      "description": "You are not permitted to monitor the vendor for licensing reasons.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "monitorVendorResponse": {
      "description": "The vendor was successfully added to the monitored list",
      "schema": {
        "$ref": "#/definitions/vendor"
      }
    },
    "multipleChoicesError": {
      "description": "Request requires multipart receipt ability",
      "schema": {
        "$ref": "#/definitions/endpoint300Error"
      }
    },
    "notFound404Error": {
      "description": "The vendor was not found.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "queueReportV1Response": {
      "description": "Report queued for export",
      "schema": {
        "$ref": "#/definitions/QueueReportResponsePayloadBody"
      }
    },
    "registerBulkHostnamesSuccessful": {
      "description": "Returns the number of newly registered hostnames as well as the number of remaining slots.",
      "schema": {
        "$ref": "#/definitions/BulkRegisterHostnamesV1ResponseBody"
      }
    },
    "reportStatusV1Response": {
      "description": "Queued report status",
      "schema": {
        "$ref": "#/definitions/ReportStatusResponsePayloadBody"
      }
    },
    "sendQuestionnaireResponse": {
      "description": "The questionnaire was successfully sent",
      "schema": {
        "$ref": "#/definitions/questionnaireSent"
      }
    },
    "sendRelationshipQuestionnaireResponse": {
      "description": "The relationship questionnaire was successfully sent",
      "schema": {
        "$ref": "#/definitions/relationship_questionnaire_sent"
      }
    },
    "tooManyRequests429Error": {
      "description": "Too many requests have been made to this endpoint.",
      "schema": {
        "$ref": "#/definitions/endpointError"
      }
    },
    "unMonitorVendor200Response": {
      "description": "The vendor was successfully removed from the monitored list if currently being monitored"
    }
  }
}
